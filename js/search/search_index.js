var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.853,1,1.981]],["body/modules/AppModule.html",[0,1.408,1,3.99,2,1.372,3,1.501,4,1.812,5,1.812,6,1.501,7,2.156,8,1.812,9,2.921,10,2.921,11,2.99,12,0.035,13,3.31,14,3.31,15,3.31,16,2.99,17,2.373,18,1.812,19,1.812,20,0.321,21,0.273,22,0.227,23,3.514,24,2.373,25,0.613,26,3.514,27,0.732,28,3.514,29,3.514,30,1.054,31,2.006,32,3.514,33,2.921,34,2.921,35,3.514,36,1.501,37,0.321,38,0.018,39,0.019,40,0.025,41,0.019]],["title/modules/AuthModule.html",[0,0.853,11,1.603]],["body/modules/AuthModule.html",[0,1.388,2,1.332,3,1.457,4,1.759,5,1.759,6,1.457,7,2.369,8,2.608,11,3.163,12,0.035,16,2.327,17,2.327,18,1.759,19,1.759,20,0.312,21,0.265,22,0.22,24,1.759,25,0.621,27,0.71,34,2.836,37,0.312,38,0.018,39,0.018,40,0.024,41,0.018,42,2.836,43,2.836,44,2.836,45,2.892,46,3.283,47,3.283,48,3.411,49,3.751,50,2.836,51,3.411,52,1.598,53,3.411,54,2.457,55,3.411,56,2.457,57,3.411,58,3.411,59,3.411,60,1.759,61,3.411,62,2.836,63,2.836,64,3.411,65,3.411,66,3.411]],["title/injectables/AuthService.html",[45,1.456,67,0.853]],["body/injectables/AuthService.html",[12,0.035,20,0.248,21,0.21,22,0.175,25,0.546,27,0.564,37,0.248,38,0.014,39,0.015,40,0.021,41,0.015,45,1.804,54,1.949,60,1.986,67,1.057,68,1.268,69,2.25,70,0.37,71,1.26,72,1.915,73,3.85,74,3.85,75,1.986,76,2.707,77,2.764,78,5.512,79,0.933,80,2.707,81,1.602,82,1.025,83,0.612,84,1.344,85,3.85,86,2.182,87,2.707,88,1.845,89,3.85,90,2.773,91,1.986,92,3.85,93,1.607,94,3.512,95,2.707,96,4.057,97,2.786,98,2.099,99,4.48,100,3.85,101,3.85,102,3.515,103,3.85,104,2.099,105,1.645,106,2.707,107,2.707,108,2.198,109,2.25,110,2.25,111,1.986,112,1.645,113,1.602,114,2.311,115,1.503,116,2.707,117,1.598,118,3.85,119,2.707,120,2.25,121,2.707,122,2.707]],["title/modules/DatabaseModule.html",[0,0.853,13,1.775]],["body/modules/DatabaseModule.html",[0,1.463,2,1.301,12,0.035,13,2.536,20,0.305,21,0.259,22,0.215,24,1.718,25,0.588,27,0.694,30,1.499,37,0.305,38,0.017,39,0.018,40,0.024,41,0.018,83,0.607,86,1.588,91,1.718,114,2.291,123,2.399,124,1.423,125,2.491,126,2.123,127,4.154,128,1.423,129,2.123,130,1.588,131,1.718,132,1.561,133,3.331,134,3.599,135,2.399,136,2.123,137,2.831,138,2.769,139,3.199,140,3.199,141,3.839,142,2.769,143,2.399,144,2.769,145,3.199,146,2.399,147,3.199,148,2.399,149,2.399,150,3.199,151,2.769,152,2.831,153,2.769,154,2.769,155,3.331,156,3.331,157,1.718,158,2.769,159,2.769,160,3.331,161,2.769]],["title/classes/Employee.html",[30,0.932,38,0.016]],["body/classes/Employee.html",[12,0.035,20,0.214,21,0.182,22,0.151,25,0.367,30,1.879,37,0.214,38,0.012,39,0.013,40,0.019,41,0.013,70,0.32,71,1.135,79,1.188,82,0.944,83,0.739,88,0.767,93,1.367,117,0.767,124,1,130,1.885,131,1.208,132,1.097,136,2.208,152,2.629,162,1,163,1.947,164,2.881,165,3.67,166,3.091,167,3.465,168,3.465,169,2.496,170,3.899,171,2.881,172,2.496,173,3.465,174,3.465,175,2.881,176,3.011,177,3.465,178,3.284,179,2.881,180,3.465,181,1.353,182,2.629,183,2.356,184,4.125,185,3.43,186,3.505,187,2.629,188,4.559,189,2.208,190,1.935,191,3.982,192,2.342,193,2.177,194,3.43,195,2.342,196,2.342,197,1.947,198,2.342,199,2.881,200,3.465,201,2.342,202,2.342,203,2.881,204,2.496,205,2.496,206,2.342,207,2.342,208,2.342,209,4.559,210,3.465,211,2.496,212,3.465,213,1.979,214,2.342,215,1.947,216,1,217,2.342,218,2.342,219,2.342,220,2.881,221,2.342,222,1.947,223,2.342,224,2.342]],["title/controllers/EmployeeController.html",[225,1.456,226,1.981]],["body/controllers/EmployeeController.html",[12,0.035,20,0.18,21,0.153,22,0.127,25,0.505,27,0.411,30,1.739,36,0.842,37,0.18,38,0.01,39,0.011,40,0.016,41,0.011,52,0.924,70,0.269,71,0.996,72,2.139,79,1.035,81,1.614,82,1.289,83,0.57,84,1.354,88,1.844,93,1.431,98,1.426,105,2.376,112,0.842,113,1.705,115,1.942,117,1.628,124,0.842,125,1.785,157,1.017,165,3.009,166,2.385,169,2.192,170,2.192,172,2.192,178,2.192,182,2.368,187,3.169,190,1.778,193,2.125,211,2.192,213,1.126,225,0.924,226,1.939,227,1.639,228,1.639,229,3.043,230,3.716,231,3.473,232,3.473,233,2.53,234,2.53,235,3.716,236,1.972,237,3.043,238,3.043,239,1.972,240,1.972,241,3.043,242,1.972,243,2.676,244,1.972,245,2.192,246,3.043,247,1.972,248,1.639,249,2.385,250,2.53,251,1.972,252,1.939,253,3.04,254,1.972,255,2.385,256,2.53,257,1.972,258,2.53,259,2.192,260,1.939,261,1.972,262,3.043,263,1.972,264,3.043,265,2.53,266,2.53,267,1.42,268,1.42,269,1.42,270,1.972,271,1.917,272,1.639,273,1.42,274,1.256,275,2.53,276,1.256,277,1.42,278,1.639,279,1.42,280,1.42,281,1.972,282,1.972,283,1.639,284,1.972,285,1.972,286,1.972,287,1.256,288,1.3,289,1.972,290,1.42,291,1.972,292,1.972,293,1.972,294,1.972,295,1.972,296,1.972,297,1.972,298,1.972,299,1.972,300,1.972,301,1.972]],["title/modules/EmployeeModule.html",[0,0.853,14,1.775]],["body/modules/EmployeeModule.html",[0,1.465,2,1.49,3,1.63,4,1.968,5,1.968,6,1.63,7,2.5,8,1.968,12,0.034,14,3.384,17,2.503,18,1.968,19,1.968,20,0.349,21,0.297,22,0.246,24,1.968,25,0.627,27,0.795,30,1.6,36,2.073,37,0.349,38,0.02,39,0.02,40,0.026,41,0.02,126,2.432,128,1.63,130,1.735,131,1.968,132,1.788,226,3.4,271,3.057,272,3.172,273,2.748,302,3.172,303,3.172,304,3.816,305,3.816,306,3.172]],["title/classes/EmployeeRole.html",[38,0.016,130,1.111]],["body/classes/EmployeeRole.html",[12,0.034,20,0.336,21,0.285,22,0.237,25,0.501,30,1.76,37,0.336,38,0.019,39,0.02,40,0.025,41,0.02,70,0.502,79,1.091,82,1.2,83,0.716,93,1.42,124,1.57,129,2.341,130,1.693,131,2.856,152,2.341,162,1.57,166,2.993,176,2.704,181,1.85,183,2.993,190,1.874,191,3.775,193,2.024,194,4.358,197,3.055,204,3.411,205,3.411,213,2.704,215,3.055,216,1.57,220,3.055,222,3.055,307,2.594,308,3.055,309,3.674,310,3.674,311,3.674,312,3.674]],["title/controllers/EmployeeRoleController.html",[225,1.456,313,1.981]],["body/controllers/EmployeeRoleController.html",[12,0.035,20,0.234,21,0.199,22,0.165,25,0.556,27,0.533,30,1.577,31,2.881,36,1.094,37,0.234,38,0.013,39,0.014,40,0.02,41,0.014,52,1.2,70,0.35,71,1.211,72,2.101,79,0.991,81,1.323,82,0.847,83,0.505,84,1.11,88,1.722,98,1.734,105,1.581,112,1.094,113,0.916,115,1.858,117,1.558,125,2.033,130,0.916,132,1.2,157,1.909,176,3.458,190,1.701,225,1.2,228,2.129,245,2.665,250,3.076,252,2.358,253,3.216,256,3.076,258,3.076,259,2.665,260,2.358,267,1.845,268,1.845,269,1.845,274,1.632,276,1.632,277,1.845,278,2.129,279,1.845,280,1.845,307,2.365,313,2.358,314,2.129,315,3.7,316,4.758,317,4.758,318,3.7,319,2.561,320,2.717,321,2.561,322,3.7,323,3.076,324,2.561,325,2.561,326,3.076,327,2.561,328,2.717,329,2.561,330,4.758,331,3.076,332,2.665,333,3.076,334,2.665,335,2.665,336,3.076,337,1.845,338,2.241,339,2.129,340,2.561,341,2.561,342,2.561,343,2.561,344,2.561,345,2.561]],["title/modules/EmployeeRoleModule.html",[0,0.853,15,1.775]],["body/modules/EmployeeRoleModule.html",[0,1.451,2,1.46,3,1.597,4,1.928,5,1.928,6,1.597,7,2.476,8,1.928,12,0.035,15,3.366,17,2.471,18,1.928,19,1.928,20,0.342,21,0.29,22,0.241,24,1.928,25,0.624,27,0.778,30,1.671,31,2.135,36,2.046,37,0.342,38,0.019,39,0.02,40,0.026,41,0.02,126,2.382,128,1.597,129,2.382,130,1.712,132,1.752,306,3.108,307,1.752,313,3.368,337,2.693,338,3.04,339,3.108,346,3.108,347,3.108,348,3.738,349,3.738]],["title/injectables/EmployeeRoleService.html",[67,0.853,338,1.603]],["body/injectables/EmployeeRoleService.html",[12,0.035,20,0.169,21,0.144,22,0.119,25,0.514,27,0.386,30,1.643,31,2.655,37,0.169,38,0.01,39,0.019,40,0.016,41,0.01,67,0.796,68,0.868,70,0.253,71,0.949,72,1.958,75,1.495,79,0.913,81,1.277,82,0.817,83,0.488,84,1.071,88,1.523,91,1.842,97,1.058,102,1.334,105,1.726,111,1.495,112,1.238,113,0.662,114,2.262,115,2.105,117,1.169,125,1.726,128,0.791,129,1.18,130,1.036,132,0.868,166,2.039,176,3.501,183,2.952,186,1.334,216,0.791,252,1.847,253,2.276,260,1.847,274,1.18,276,1.18,287,2.276,288,1.873,290,3.158,307,2.179,320,2.307,323,2.41,326,3.358,328,2.307,331,2.41,332,1.334,333,1.54,334,1.334,335,2.088,336,2.41,337,1.334,338,1.495,350,1.54,351,4.04,352,4.04,353,2.899,354,2.899,355,1.54,356,3.097,357,2.969,358,1.852,359,2.41,360,1.852,361,2.088,362,2.899,363,2.899,364,1.852,365,2.899,366,1.852,367,2.899,368,2.41,369,2.899,370,2.088,371,2.899,372,1.852,373,2.899,374,2.969,375,1.54,376,1.334,377,1.54,378,1.54,379,2.899,380,4.04,381,2.969,382,1.852,383,1.334,384,1.54,385,1.852,386,1.852,387,1.852,388,1.852,389,1.54,390,2.899,391,1.54,392,2.899,393,2.899,394,3.571,395,3.571,396,2.969,397,3.571,398,3.571,399,1.852,400,1.54,401,1.852,402,1.852,403,1.54,404,1.54,405,1.852,406,1.852,407,1.852,408,1.54,409,2.41,410,1.852,411,1.54,412,1.852,413,1.852]],["title/injectables/EmployeeService.html",[67,0.853,271,1.603]],["body/injectables/EmployeeService.html",[12,0.035,20,0.098,21,0.083,22,0.069,25,0.427,27,0.223,30,1.865,37,0.098,38,0.006,39,0.006,40,0.01,41,0.006,67,0.507,68,0.503,70,0.146,71,0.605,72,1.996,75,0.953,79,0.912,81,1.365,82,1.15,83,0.487,84,1.146,88,1.48,91,2.505,96,0.892,97,0.613,98,1.529,102,1.753,105,2.075,111,2.081,112,0.79,113,1.275,114,2.505,115,2.018,117,1.619,124,1.04,125,1.394,128,0.458,130,1.034,131,0.553,132,0.503,157,1.256,161,1.536,166,2.582,169,1.753,170,1.331,171,2.712,172,1.331,175,0.892,176,1.055,178,1.331,179,2.712,182,1.551,183,2.653,185,2.405,187,2.434,189,2.571,193,1.932,203,1.536,204,1.753,211,2.084,213,2.036,216,0.458,231,2.405,232,2.405,233,1.536,234,1.536,245,0.773,248,1.536,249,1.652,252,1.178,253,2.079,255,1.652,260,1.178,265,1.536,266,1.536,271,0.953,273,0.773,274,0.684,275,1.536,276,0.684,283,0.892,287,2.272,288,1.932,290,2.751,332,2.35,334,1.331,335,0.773,355,0.892,356,2.434,357,2.024,359,1.536,361,2.084,370,0.773,374,2.024,375,0.892,376,0.773,377,0.892,378,0.892,381,0.892,383,0.773,384,0.892,389,0.892,391,1.536,396,0.892,400,2.405,403,0.892,404,0.892,408,0.892,409,1.536,411,2.024,414,0.892,415,1.536,416,1.331,417,1.848,418,1.848,419,1.848,420,1.848,421,2.894,422,1.848,423,1.848,424,1.848,425,1.848,426,1.073,427,1.073,428,1.848,429,1.073,430,1.848,431,1.848,432,1.848,433,1.073,434,1.848,435,1.848,436,1.848,437,1.536,438,1.848,439,1.848,440,1.073,441,1.848,442,1.848,443,1.848,444,1.848,445,1.073,446,1.073,447,1.848,448,1.848,449,1.073,450,1.848,451,1.073,452,2.434,453,1.848,454,1.848,455,1.848,456,1.848,457,1.073,458,2.434,459,2.405,460,1.848,461,1.073,462,1.073,463,1.073,464,1.073,465,0.892,466,1.848,467,1.073,468,1.073,469,1.073,470,1.073,471,1.073,472,1.073,473,1.073,474,1.073,475,1.073,476,1.073,477,1.073,478,1.073,479,1.073,480,1.073,481,1.073,482,2.434,483,1.073,484,1.073,485,1.073,486,1.073,487,1.073,488,1.073,489,2.894,490,1.073,491,2.434,492,1.073,493,2.894,494,1.073,495,1.073,496,1.073,497,1.848,498,1.073,499,3.263,500,2.434,501,1.536,502,1.073,503,1.848,504,1.073,505,2.894,506,1.073,507,1.073,508,1.073,509,1.073,510,1.073,511,1.073,512,1.073,513,1.073,514,1.073,515,1.073,516,1.073,517,1.073,518,1.073,519,1.073,520,1.073,521,1.073,522,1.073,523,1.073,524,1.848,525,1.073,526,1.073,527,1.073,528,1.073,529,0.892,530,1.073,531,1.073,532,1.073,533,1.848,534,1.073,535,1.073,536,1.073,537,1.073,538,1.848,539,1.848,540,1.073,541,1.073,542,1.073,543,1.073,544,1.073,545,1.073,546,1.073,547,1.073,548,1.073]],["title/interfaces/JwtPayload.html",[108,1.775,549,1.775]],["body/interfaces/JwtPayload.html",[12,0.033,20,0.419,21,0.356,22,0.295,37,0.419,39,0.025,40,0.029,41,0.025,70,0.625,83,0.625,93,1.735,104,2.803,108,3.099,181,2.119,549,2.614,550,4.577,551,3.805,552,3.805]],["title/injectables/JwtStrategy.html",[46,1.775,67,0.853]],["body/injectables/JwtStrategy.html",[12,0.035,20,0.325,21,0.276,22,0.229,25,0.578,27,0.74,37,0.325,38,0.018,39,0.019,40,0.025,41,0.019,46,2.646,52,1.665,56,2.559,60,1.832,63,2.953,67,1.272,68,1.665,70,0.485,71,1.517,72,1.844,75,2.66,79,0.965,81,1.27,82,0.813,83,0.485,84,1.065,88,1.163,90,3.338,104,1.665,105,1.98,108,2.028,109,2.953,110,2.953,113,1.27,117,1.163,120,3.852,553,2.953,554,3.852,555,3.552,556,4.634,557,3.552,558,4.634,559,3.852,560,4.634,561,4.634,562,3.852,563,4.634,564,3.338,565,3.552,566,2.559,567,2.953,568,2.953,569,2.953,570,2.559,571,3.552,572,3.552,573,3.552,574,3.552,575,3.552,576,3.552]],["title/injectables/LocalStrategy.html",[47,1.775,67,0.853]],["body/injectables/LocalStrategy.html",[12,0.035,20,0.296,21,0.252,22,0.209,25,0.558,27,0.674,37,0.296,38,0.017,39,0.017,40,0.023,41,0.017,45,2.654,47,2.489,50,2.693,52,1.518,56,3.548,67,1.196,68,1.518,70,0.442,71,1.427,72,1.761,75,2.248,79,0.908,81,1.558,82,0.998,83,0.595,84,1.307,86,1.966,88,1.061,93,1.699,94,3.689,98,2.042,104,2.469,111,1.671,112,1.384,113,1.558,114,1.671,115,1.265,117,1.061,124,1.384,125,1.862,287,2.064,288,1.384,554,3.624,566,2.333,567,2.693,568,2.693,569,2.693,570,2.333,577,4.096,578,2.693,579,3.624,580,4.359,581,3.139,582,3.239,583,3.239,584,4.359,585,3.239,586,4.359,587,4.359,588,2.333,589,3.239]],["title/classes/RemoveEmployeeDto.html",[38,0.016,249,1.775]],["body/classes/RemoveEmployeeDto.html",[12,0.034,20,0.403,21,0.342,22,0.284,25,0.466,37,0.403,38,0.028,39,0.024,40,0.028,41,0.024,70,0.602,79,0.917,83,0.602,162,1.882,181,2.071,190,1.575,193,2.266,243,4.098,249,3.028,590,4.409,591,3.172,592,3.626,593,3.662,594,2.515]],["title/classes/RemoveRoleDto.html",[38,0.016,328,1.775]],["body/classes/RemoveRoleDto.html",[12,0.034,20,0.381,21,0.323,22,0.268,25,0.44,37,0.381,38,0.027,39,0.022,40,0.028,41,0.022,70,0.568,79,1.067,83,0.7,162,1.778,181,2.001,190,1.832,193,2.475,307,2.601,328,2.926,592,3.79,594,2.377,595,4.615,596,2.998,597,5.551,598,5.551,599,4.162,600,4.162]],["title/classes/SaveEmployeeDto.html",[38,0.016,255,1.775]],["body/classes/SaveEmployeeDto.html",[12,0.034,20,0.303,21,0.258,22,0.214,25,0.351,37,0.303,38,0.023,39,0.018,40,0.024,41,0.018,70,0.453,79,1.212,82,1.141,83,0.795,84,1.328,93,1.595,162,1.416,181,1.729,182,3.176,186,3.59,187,3.176,189,2.821,190,2.081,193,2.527,243,3.59,255,2.527,591,2.387,592,3.532,593,2.755,594,1.892,601,4.918,602,4.984,603,4.984,604,3.314,605,3.314,606,4.422,607,3.314,608,4.427,609,3.314,610,2.755,611,3.314,612,3.314,613,3.314,614,3.314,615,4.422,616,3.314,617,4.427,618,4.427,619,4.427]],["title/classes/SaveRoleDto.html",[38,0.016,320,1.775]],["body/classes/SaveRoleDto.html",[12,0.034,20,0.372,21,0.316,22,0.262,25,0.431,37,0.372,38,0.026,39,0.022,40,0.027,41,0.022,70,0.556,79,1.052,82,1.258,83,0.69,84,1.515,93,1.515,162,1.739,181,1.973,183,3.138,190,1.806,193,2.159,307,2.575,320,2.885,592,3.22,594,2.324,596,2.931,606,4.201,610,3.383,615,4.201,620,4.569,621,4.07,622,4.07,623,4.07,624,5.053]],["title/classes/User.html",[38,0.016,86,1.111]],["body/classes/User.html",[12,0.034,20,0.268,21,0.228,22,0.189,25,0.431,37,0.268,38,0.015,39,0.016,40,0.022,41,0.016,70,0.401,71,1.334,72,1.966,79,1.053,81,1.457,82,0.933,83,0.691,84,1.222,86,1.808,88,1.334,93,1.773,94,3.914,97,2.327,104,2.194,105,2.161,111,2.415,113,1.457,115,1.592,117,0.961,124,2,157,2.102,162,1.254,164,3.388,181,1.592,190,1.457,191,3.372,213,2.327,216,1.254,288,1.741,625,2.44,626,4.076,627,4.076,628,3.388,629,3.388,630,4.076,631,4.076,632,2.936,633,2.936,634,2.936,635,4.076,636,2.936,637,4.076,638,4.076,639,4.076,640,4.076,641,2.936,642,4.076,643,4.076,644,4.076,645,4.076,646,4.076,647,4.076,648,4.076,649,4.076,650,3.388,651,2.936,652,4.076,653,2.936,654,2.936,655,2.936]],["title/controllers/UsersController.html",[225,1.456,656,1.981]],["body/controllers/UsersController.html",[12,0.035,20,0.308,21,0.262,22,0.217,25,0.532,27,0.701,36,1.438,37,0.308,38,0.018,39,0.018,40,0.024,41,0.018,45,2.354,52,1.577,60,2.307,70,0.46,71,1.465,72,2.048,79,0.931,81,1.203,82,0.77,84,1.01,86,1.599,88,1.753,90,4.21,112,1.438,113,1.203,115,1.315,117,1.465,157,1.736,190,1.599,225,2.096,267,2.424,268,2.424,269,2.424,277,2.424,279,2.424,280,2.424,288,1.911,370,3.221,564,3.221,629,3.718,656,2.85,657,2.798,658,5.352,659,3.366,660,3.366,661,3.366,662,4.473,663,4.473,664,3.366,665,3.366,666,4.473,667,4.473,668,4.473,669,3.366,670,3.366,671,3.366,672,3.366,673,3.366,674,3.366,675,3.366]],["title/modules/UsersModule.html",[0,0.853,16,1.603]],["body/modules/UsersModule.html",[0,1.449,2,1.456,3,1.593,4,1.923,5,1.923,6,1.593,7,2.473,8,2.722,11,2.466,12,0.034,16,3.089,17,2.466,18,1.923,19,1.923,20,0.341,21,0.29,22,0.24,24,1.923,25,0.623,27,0.776,33,3.099,36,2.042,37,0.341,38,0.019,39,0.02,40,0.026,41,0.02,49,3.974,77,3.225,86,1.333,126,2.375,128,1.593,656,3.363,676,3.099,677,3.099,678,3.099,679,3.728,680,3.728,681,3.099,682,3.728,683,3.728]],["title/injectables/UsersService.html",[67,0.853,77,1.603]],["body/injectables/UsersService.html",[12,0.035,20,0.256,21,0.217,22,0.18,25,0.524,27,0.582,37,0.256,38,0.015,39,0.015,40,0.021,41,0.015,67,1.081,68,1.31,70,0.382,71,1.289,72,1.935,75,2.031,77,2.031,79,0.949,81,1.408,82,0.901,83,0.538,84,1.181,86,2.064,88,1.289,93,1.367,98,1.31,104,2.445,105,2.115,111,2.553,112,1.194,113,0.999,114,2.352,115,1.933,117,1.493,128,1.194,143,2.013,165,2.836,216,1.194,259,2.013,288,1.194,356,3.155,361,2.836,368,3.274,376,2.013,383,2.013,459,3.274,529,3.274,570,2.836,581,2.836,681,2.324,684,2.013,685,3.938,686,4.95,687,2.795,688,2.795,689,3.938,690,3.938,691,2.795,692,2.795,693,3.938,694,3.274,695,3.938,696,3.274,697,3.938,698,3.938,699,3.938,700,4.625,701,3.274,702,3.938,703,3.938,704,3.274,705,3.938,706,3.284,707,2.795,708,2.795,709,2.795,710,2.795,711,2.795,712,2.795,713,2.795,714,2.795]],["title/coverage.html",[715,3.053]],["body/coverage.html",[6,1.353,12,0.034,22,0.204,30,0.95,31,2.451,38,0.03,39,0.017,40,0.023,41,0.017,45,1.484,46,1.808,47,1.808,67,1.545,69,2.633,77,1.634,83,0.432,86,1.132,108,1.808,123,3.092,130,1.132,131,1.634,140,2.281,150,2.281,163,2.633,205,2.281,225,2.282,226,2.018,227,2.633,249,1.808,255,1.808,271,1.634,288,1.353,307,2.557,308,2.633,313,2.018,314,2.633,320,1.808,328,1.808,338,1.634,350,2.633,414,2.633,549,1.808,551,2.633,552,2.633,553,2.633,562,2.633,577,2.633,578,2.633,590,2.633,591,3.092,595,2.633,596,3.092,601,2.633,620,2.633,625,2.633,656,2.018,657,2.633,684,3.092,706,2.281,715,2.281,716,2.633,717,3.167,718,3.167,719,4.871,720,4.293,721,5.755,722,4.293,723,3.167,724,3.167,725,4.871,726,4.293,727,4.871,728,4.293,729,4.293,730,4.293,731,4.293,732,4.293,733,3.167,734,3.167,735,3.167,736,3.167,737,3.167,738,3.167,739,3.167,740,3.167,741,3.167,742,2.633,743,4.293,744,3.167]],["title/dependencies.html",[3,1.597,745,2.597]],["body/dependencies.html",[3,1.611,12,0.035,27,0.785,38,0.025,39,0.02,40,0.026,41,0.02,52,1.767,54,2.716,60,1.945,128,1.611,137,2.403,189,2.403,216,1.611,465,3.135,566,3.822,588,2.716,594,2.153,650,3.135,746,5.307,747,3.771,748,4.816,749,3.771,750,3.771,751,3.771,752,3.771,753,3.771,754,3.771,755,3.771,756,3.771,757,3.771,758,3.771,759,3.771,760,3.771,761,3.771,762,3.771,763,3.771,764,3.771,765,3.771,766,3.771,767,3.771,768,3.771,769,3.771,770,3.771,771,3.771,772,3.771,773,3.771,774,3.771,775,3.771,776,3.771,777,3.771,778,3.771,779,3.771,780,3.771,781,3.771,782,3.771,783,3.771]],["title/miscellaneous/functions.html",[416,2.692,784,1.655]],["body/miscellaneous/functions.html",[6,2.532,12,0.03,39,0.026,40,0.03,41,0.026,70,0.663,416,3.496,742,4.035,784,3.093,785,4.854]],["title/index.html",[70,0.355,786,2.597,787,2.597]],["body/index.html",[7,1.122,12,0.032,21,0.186,22,0.227,39,0.013,40,0.019,41,0.013,60,1.235,62,3.474,82,0.548,83,0.327,86,0.856,91,1.817,93,1.253,94,1.526,97,1.367,98,1.122,104,1.651,124,1.023,125,2.194,134,1.724,135,1.724,136,2.245,137,2.245,139,2.537,141,2.537,145,1.724,146,2.537,147,3.01,148,1.724,149,4.005,158,1.99,159,4.27,181,0.935,199,1.99,216,1.505,356,2.245,415,3.831,437,1.99,501,1.99,549,1.367,564,1.724,579,1.99,581,1.724,588,1.724,628,1.99,694,2.928,696,1.99,701,2.928,704,3.831,715,1.724,716,4.083,788,4.609,789,3.522,790,4.609,791,4.911,792,4.179,793,3.522,794,3.522,795,4.609,796,4.179,797,3.522,798,2.394,799,3.522,800,2.394,801,2.394,802,2.394,803,2.394,804,3.522,805,2.394,806,2.394,807,2.394,808,2.394,809,3.522,810,2.394,811,4.179,812,3.522,813,5.655,814,4.179,815,4.179,816,2.394,817,2.394,818,2.394,819,2.394,820,3.522,821,3.522,822,3.522,823,2.394,824,2.394,825,2.394,826,3.522,827,4.179,828,2.394,829,2.394,830,3.522,831,2.394,832,2.394,833,2.394,834,2.394,835,2.394,836,2.394,837,2.394,838,2.394,839,3.522,840,2.394,841,2.394,842,4.179,843,2.394,844,2.394,845,2.394,846,3.522,847,2.394,848,2.394,849,3.522,850,2.394,851,2.394,852,2.394,853,2.394,854,2.394,855,2.394,856,2.394,857,5.448,858,2.394,859,2.394,860,2.394,861,2.394,862,2.394,863,2.394,864,2.394,865,2.394,866,2.394,867,2.394,868,2.394,869,2.394,870,2.394,871,2.394,872,2.394,873,2.394,874,3.522,875,2.394,876,2.394,877,4.179,878,2.394,879,2.394,880,2.394,881,2.394,882,2.394,883,2.394,884,2.394,885,2.394,886,2.394,887,2.394,888,3.522,889,2.394,890,2.394,891,2.394,892,2.394,893,3.522,894,2.394,895,2.394]],["title/modules.html",[2,1.655]],["body/modules.html",[1,2.856,2,1.75,11,2.312,12,0.029,13,2.559,14,2.559,15,2.559,16,2.312,39,0.024,40,0.029,41,0.024,896,6.072,897,6.072,898,6.072,899,6.163,900,4.482,901,4.482]],["title/overview.html",[902,3.524]],["body/overview.html",[0,0.951,1,3.943,2,1.354,3,1.481,4,1.788,5,1.788,6,1.481,7,1.624,8,1.788,9,2.881,10,2.881,11,3.147,12,0.034,13,2.91,14,3.212,15,3.212,16,2.979,17,2.352,18,1.788,19,1.788,36,1.481,39,0.019,40,0.024,41,0.019,42,2.881,43,2.881,44,2.881,45,2.759,46,2.91,47,2.91,68,1.624,77,3.037,162,1.481,271,2.629,302,2.881,303,2.881,338,2.629,346,2.881,347,2.881,549,1.979,676,2.881,677,2.881,678,2.881,902,2.881,903,4.56,904,3.466,905,3.466,906,3.466]],["title/miscellaneous/variables.html",[784,1.655,907,3.107]],["body/miscellaneous/variables.html",[12,0.034,39,0.021,40,0.026,41,0.021,70,0.532,83,0.797,91,2.01,93,1.169,123,2.807,125,2.493,127,4.088,134,3.542,135,2.807,136,2.483,137,3.134,138,3.24,139,3.542,140,3.542,141,2.807,142,3.24,143,4.076,144,3.24,145,3.542,146,2.807,147,3.542,148,2.807,149,2.807,150,3.542,151,3.24,152,3.134,153,3.24,154,3.24,559,4.479,684,2.807,700,3.24,706,3.542,784,2.483,907,3.24,908,3.897,909,4.918]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0.1.12",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["0.2.18",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":906,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["1.30.1",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":654,"title":{},"body":{"classes/User.html":{}}}],["100",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["14.3.1",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["2.10.0",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":904,"title":{},"body":{"overview.html":{}}}],["3.0.3",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["3.19.0",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["5/10",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":903,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":905,"title":{},"body":{"overview.html":{}}}],["7.11.0",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{}}}],["8.0.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["81",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":808,"title":{},"body":{"index.html":{}}}],["account",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["add",{"_index":529,"title":{},"body":{"injectables/EmployeeService.html":{},"injectables/UsersService.html":{}}}],["added",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["addrole",{"_index":315,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["addrole(@body",{"_index":341,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["addrole(details",{"_index":319,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["admin",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["admin_default_pass",{"_index":886,"title":{},"body":{"index.html":{}}}],["admin_username",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":888,"title":{},"body":{"index.html":{}}}],["administrators/users",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminuser",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminuser.setpassword(process.env.admin_default_pass",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminuser.username",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["advanced",{"_index":847,"title":{},"body":{"index.html":{}}}],["against",{"_index":645,"title":{},"body":{"classes/User.html":{}}}],["already",{"_index":259,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":368,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/UsersService.html":{}}}],["angular",{"_index":826,"title":{},"body":{"index.html":{}}}],["any].oversees.push(employee",{"_index":532,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["api",{"_index":792,"title":{},"body":{"index.html":{}}}],["app",{"_index":859,"title":{},"body":{"index.html":{}}}],["application",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arr",{"_index":537,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["arr.push(employee",{"_index":536,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["assessment",{"_index":790,"title":{},"body":{"index.html":{}}}],["assign",{"_index":384,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["async",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.service",{"_index":50,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{}}}],["authentication",{"_index":579,"title":{},"body":{"injectables/LocalStrategy.html":{},"index.html":{}}}],["authguard",{"_index":277,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":45,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":810,"title":{},"body":{"index.html":{}}}],["available",{"_index":901,"title":{},"body":{"modules.html":{}}}],["await",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":375,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["badrequestexception('an",{"_index":482,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["badrequestexception('cannot",{"_index":394,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["badrequestexception('the",{"_index":497,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["base",{"_index":793,"title":{},"body":{"index.html":{}}}],["based",{"_index":628,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["bases",{"_index":841,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":650,"title":{},"body":{"classes/User.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(plaintextpassword",{"_index":655,"title":{},"body":{"classes/User.html":{}}}],["bcrypt.hash(password",{"_index":653,"title":{},"body":{"classes/User.html":{}}}],["before",{"_index":443,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["being",{"_index":334,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["below",{"_index":879,"title":{},"body":{"index.html":{}}}],["between",{"_index":839,"title":{},"body":{"index.html":{}}}],["birthdate",{"_index":182,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{},"classes/SaveEmployeeDto.html":{}}}],["body",{"_index":268,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["born",{"_index":442,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["browse",{"_index":899,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":896,"title":{},"body":{"modules.html":{}}}],["buildtrees",{"_index":421,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["built",{"_index":819,"title":{},"body":{"index.html":{}}}],["cache",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["cachemodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["called",{"_index":563,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["case",{"_index":265,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["catch",{"_index":285,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["certain",{"_index":203,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeService.html":{}}}],["check",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmployeeService.html":{}}}],["children",{"_index":530,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["choice",{"_index":828,"title":{},"body":{"index.html":{}}}],["class",{"_index":38,"title":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":162,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"overview.html":{}}}],["client",{"_index":795,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":42,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":43,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":44,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_employeemodule",{"_index":302,"title":{},"body":{"modules/EmployeeModule.html":{},"overview.html":{}}}],["cluster_employeemodule_providers",{"_index":303,"title":{},"body":{"modules/EmployeeModule.html":{},"overview.html":{}}}],["cluster_employeerolemodule",{"_index":346,"title":{},"body":{"modules/EmployeeRoleModule.html":{},"overview.html":{}}}],["cluster_employeerolemodule_providers",{"_index":347,"title":{},"body":{"modules/EmployeeRoleModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":676,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":677,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":678,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":797,"title":{},"body":{"index.html":{}}}],["column",{"_index":191,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"classes/User.html":{}}}],["compares",{"_index":580,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["comparison",{"_index":209,"title":{},"body":{"classes/Employee.html":{}}}],["compodoc",{"_index":869,"title":{},"body":{"index.html":{}}}],["compression",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["configurable",{"_index":825,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":134,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configured",{"_index":809,"title":{},"body":{"index.html":{}}}],["const",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":582,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(employeerepository",{"_index":355,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["constructor(private",{"_index":280,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["contains",{"_index":895,"title":{},"body":{"index.html":{}}}],["continuous",{"_index":852,"title":{},"body":{"index.html":{}}}],["controller",{"_index":225,"title":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('employee",{"_index":278,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{}}}],["controllers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convenient",{"_index":418,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["core",{"_index":798,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":715,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":383,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":890,"title":{},"body":{"index.html":{}}}],["creates",{"_index":459,"title":{},"body":{"injectables/EmployeeService.html":{},"injectables/UsersService.html":{}}}],["credential",{"_index":627,"title":{},"body":{"classes/User.html":{}}}],["database",{"_index":125,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database.sqlite",{"_index":142,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["database_type",{"_index":891,"title":{},"body":{"index.html":{}}}],["database_url",{"_index":894,"title":{},"body":{"index.html":{}}}],["databasemodule",{"_index":13,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":189,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeService.html":{},"classes/SaveEmployeeDto.html":{},"dependencies.html":{}}}],["date(birthdate",{"_index":295,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["date(employeedetails.birthdate",{"_index":519,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["dd",{"_index":477,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["decent",{"_index":853,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":190,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":143,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultconfig",{"_index":150,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":144,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":59,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defualt",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":811,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":148,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desc",{"_index":413,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["descendant",{"_index":430,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["descendant.id",{"_index":511,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["descendants",{"_index":505,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["descendants.find(descendant",{"_index":510,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["descendants.push(node",{"_index":543,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["description",{"_index":124,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"index.html":{}}}],["descriptions",{"_index":878,"title":{},"body":{"index.html":{}}}],["details",{"_index":253,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["details.employeenumber",{"_index":479,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["details.id",{"_index":380,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["details.name",{"_index":387,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["details.roletoremoveid",{"_index":392,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["details.roletoreplaceid",{"_index":393,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["determines",{"_index":558,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["development",{"_index":849,"title":{},"body":{"index.html":{}}}],["docconfiguration",{"_index":871,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":716,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":382,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["dotenv",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["dto/remove",{"_index":276,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["dto/save",{"_index":274,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["e",{"_index":220,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{}}}],["e.oversees",{"_index":221,"title":{},"body":{"classes/Employee.html":{}}}],["e.reportsto",{"_index":223,"title":{},"body":{"classes/Employee.html":{}}}],["e.role",{"_index":312,"title":{},"body":{"classes/EmployeeRole.html":{}}}],["e2e",{"_index":866,"title":{},"body":{"index.html":{}}}],["earning",{"_index":323,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{}}}],["employee",{"_index":30,"title":{"classes/Employee.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"coverage.html":{}}}],["employee's",{"_index":211,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["employee.birthdate",{"_index":518,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee.controller",{"_index":305,"title":{},"body":{"modules/EmployeeModule.html":{}}}],["employee.dto",{"_index":275,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["employee.dto.ts",{"_index":591,"title":{},"body":{"classes/RemoveEmployeeDto.html":{},"classes/SaveEmployeeDto.html":{},"coverage.html":{}}}],["employee.dto.ts:13",{"_index":614,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employee.dto.ts:17",{"_index":605,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employee.dto.ts:21",{"_index":613,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employee.dto.ts:24",{"_index":607,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employee.dto.ts:28",{"_index":611,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employee.dto.ts:5",{"_index":593,"title":{},"body":{"classes/RemoveEmployeeDto.html":{},"classes/SaveEmployeeDto.html":{}}}],["employee.dto.ts:9",{"_index":609,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employee.id",{"_index":491,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee.name",{"_index":514,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee.oversees",{"_index":525,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee.reportsto",{"_index":489,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee.role",{"_index":403,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["employee.salary",{"_index":520,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee.service",{"_index":272,"title":{},"body":{"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{}}}],["employee.surname",{"_index":516,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employee/employee.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["employee/entities/employee.entity",{"_index":129,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/EmployeeRole.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{}}}],["employeecontroller",{"_index":226,"title":{"controllers/EmployeeController.html":{}},"body":{"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"coverage.html":{}}}],["employeedetails",{"_index":460,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeedetails.employeenumber",{"_index":493,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeedetails.employeeroleid",{"_index":496,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeedetails.name",{"_index":515,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeedetails.reportstoemployeeid",{"_index":500,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeedetails.salary",{"_index":521,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeedetails.surname",{"_index":517,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeemodule",{"_index":14,"title":{"modules/EmployeeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmployeeModule.html":{},"modules.html":{},"overview.html":{}}}],["employeenumber",{"_index":243,"title":{},"body":{"controllers/EmployeeController.html":{},"classes/RemoveEmployeeDto.html":{},"classes/SaveEmployeeDto.html":{}}}],["employeerepository",{"_index":359,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["employeerole",{"_index":130,"title":{"classes/EmployeeRole.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/Employee.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"coverage.html":{}}}],["employeerole.employees",{"_index":218,"title":{},"body":{"classes/Employee.html":{}}}],["employeerolecontroller",{"_index":313,"title":{"controllers/EmployeeRoleController.html":{}},"body":{"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"coverage.html":{}}}],["employeeroleid",{"_index":602,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["employeerolemodule",{"_index":15,"title":{"modules/EmployeeRoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmployeeRoleModule.html":{},"modules.html":{},"overview.html":{}}}],["employeerolerepository",{"_index":357,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["employeeroleservice",{"_index":338,"title":{"injectables/EmployeeRoleService.html":{}},"body":{"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"coverage.html":{},"overview.html":{}}}],["employees",{"_index":166,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["employees.foreach(employee",{"_index":524,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employees.reduce((ob",{"_index":526,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeeservice",{"_index":271,"title":{"injectables/EmployeeService.html":{}},"body":{"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"injectables/EmployeeService.html":{},"coverage.html":{},"overview.html":{}}}],["employeeswhoreporttodelete",{"_index":483,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["employeeswithrole",{"_index":399,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["employeeswithrole.map(employee",{"_index":402,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["enables",{"_index":626,"title":{},"body":{"classes/User.html":{}}}],["endpoint",{"_index":802,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":806,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":495,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["ensures",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities",{"_index":161,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmployeeService.html":{}}}],["entities/employee",{"_index":337,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{}}}],["entities/employee.entity",{"_index":273,"title":{},"body":{"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"injectables/EmployeeService.html":{}}}],["entities/user.entity",{"_index":681,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":213,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeService.html":{},"classes/User.html":{}}}],["entity's",{"_index":513,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["env",{"_index":874,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":876,"title":{},"body":{"index.html":{}}}],["environment",{"_index":158,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["epi",{"_index":788,"title":{},"body":{"index.html":{}}}],["error",{"_index":502,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["etc",{"_index":893,"title":{},"body":{"index.html":{}}}],["exact",{"_index":435,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["example",{"_index":875,"title":{},"body":{"index.html":{}}}],["exception",{"_index":286,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["exist",{"_index":332,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["existing",{"_index":374,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["exists",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["expiresin",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":568,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":565,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":572,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fails",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":574,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["field",{"_index":486,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["finally",{"_index":404,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["find",{"_index":290,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["finddescendants",{"_index":422,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["finddescendants(employee",{"_index":428,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["findemployeebyname",{"_index":423,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["findemployeebyname(name",{"_index":432,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["findemployeesolderthan",{"_index":424,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["findemployeesolderthan(birthdate",{"_index":439,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["findemployeesolderthandate",{"_index":229,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["findemployeesolderthandate(@param('birthdate",{"_index":294,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["findemployeesolderthandate(birthdate",{"_index":236,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["findhighestpaidemployeeperrole",{"_index":351,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["finds",{"_index":361,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/UsersService.html":{}}}],["finduser",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduser(username",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":437,"title":{},"body":{"injectables/EmployeeService.html":{},"index.html":{}}}],["fix",{"_index":508,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["fns",{"_index":465,"title":{},"body":{"injectables/EmployeeService.html":{},"dependencies.html":{}}}],["follows",{"_index":829,"title":{},"body":{"index.html":{}}}],["format",{"_index":464,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["forwardref",{"_index":49,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":501,"title":{},"body":{"injectables/EmployeeService.html":{},"index.html":{}}}],["framework",{"_index":822,"title":{},"body":{"index.html":{}}}],["free",{"_index":855,"title":{},"body":{"index.html":{}}}],["function",{"_index":562,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["functionality",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["functions",{"_index":416,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/EmployeeService.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["generate",{"_index":870,"title":{},"body":{"index.html":{}}}],["generated",{"_index":494,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["generatetoken",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('hierarchy",{"_index":246,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["get('highest",{"_index":322,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["get('search/id/:employeenumber",{"_index":241,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["get('search/name/:name/:surname",{"_index":262,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["get('search/older",{"_index":237,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["get('verify",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["getemployee",{"_index":425,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["getemployee(id",{"_index":444,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["getemployeebyid",{"_index":230,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["getemployeebyid(employeenumber",{"_index":240,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["getemployeeroles",{"_index":352,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["getemployees",{"_index":231,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["gethierarchy",{"_index":232,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["gethighestearningbyrole",{"_index":316,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["getone",{"_index":473,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["getroles",{"_index":317,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["getting",{"_index":786,"title":{"index.html":{}},"body":{}}],["github",{"_index":816,"title":{},"body":{"index.html":{}}}],["given",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":900,"title":{},"body":{"modules.html":{}}}],["guaranteed",{"_index":561,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hashed",{"_index":644,"title":{},"body":{"classes/User.html":{}}}],["hashes",{"_index":637,"title":{},"body":{"classes/User.html":{}}}],["helmet",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["helps",{"_index":834,"title":{},"body":{"index.html":{}}}],["hence",{"_index":889,"title":{},"body":{"index.html":{}}}],["heroku",{"_index":812,"title":{},"body":{"index.html":{}}}],["hh:mm:ss",{"_index":478,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["hierarchy",{"_index":172,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["highest",{"_index":362,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["highly",{"_index":823,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":174,"title":{},"body":{"classes/Employee.html":{}}}],["id",{"_index":183,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"classes/SaveRoleDto.html":{}}}],["identifier",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":448,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["ignoreexpiration",{"_index":573,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":865,"title":{},"body":{"index.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{}}}],["includes",{"_index":431,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["index",{"_index":70,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":804,"title":{},"body":{"index.html":{}}}],["initial",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectentitymanager",{"_index":463,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["injectrepository",{"_index":376,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(employee",{"_index":377,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["injectrepository(employeerole",{"_index":378,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["injectrepository(user",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["insensitive",{"_index":266,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["inserts",{"_index":373,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["installation",{"_index":856,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":858,"title":{},"body":{"index.html":{}}}],["instead",{"_index":455,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["integrates",{"_index":850,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":417,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["interface",{"_index":549,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":550,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["interfaces/jwt",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["isdatestring",{"_index":618,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["isnotempty",{"_index":615,"title":{},"body":{"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{}}}],["isnotempty()@isdatestring",{"_index":604,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["isnotempty()@length(1",{"_index":608,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["isnumber",{"_index":592,"title":{},"body":{"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{}}}],["isnumber()@isoptional",{"_index":610,"title":{},"body":{"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{}}}],["isnumber()@ispositive",{"_index":612,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["isoptional",{"_index":606,"title":{},"body":{"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{}}}],["ispositive",{"_index":617,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["isstring",{"_index":624,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["isstring()@isnotempty",{"_index":622,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["itself",{"_index":391,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["joi",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":60,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":571,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":53,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":61,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":108,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":46,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kept",{"_index":882,"title":{},"body":{"index.html":{}}}],["key",{"_index":880,"title":{},"body":{"index.html":{}}}],["layer",{"_index":800,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":616,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["length(1",{"_index":619,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["lessthan",{"_index":462,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["lessthan(format(birthdate",{"_index":474,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["link",{"_index":807,"title":{},"body":{"index.html":{}}}],["list",{"_index":245,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeService.html":{}}}],["loadeagerrelations",{"_index":480,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["loadrelationids",{"_index":466,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["local",{"_index":588,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["localstrategy",{"_index":47,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":629,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{}}}],["login(@request",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(req",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["logs",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["long",{"_index":884,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":204,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeService.html":{}}}],["lookup[employee.id",{"_index":540,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["lookup[employee.reportsto",{"_index":531,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["lookup[id",{"_index":535,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["loops",{"_index":175,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeService.html":{}}}],["lower(:name",{"_index":470,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["lower(:surname",{"_index":472,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["lower(surname",{"_index":471,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["manager",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["manner",{"_index":420,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["many",{"_index":199,"title":{},"body":{"classes/Employee.html":{},"index.html":{}}}],["manytoone",{"_index":214,"title":{},"body":{"classes/Employee.html":{}}}],["manytoone(t",{"_index":219,"title":{},"body":{"classes/Employee.html":{}}}],["manytoone(type",{"_index":217,"title":{},"body":{"classes/Employee.html":{}}}],["manytoone(undefined",{"_index":200,"title":{},"body":{"classes/Employee.html":{}}}],["mapper",{"_index":845,"title":{},"body":{"index.html":{}}}],["match",{"_index":436,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["matches",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":212,"title":{},"body":{"classes/Employee.html":{}}}],["metadata",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":784,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":476,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["mode",{"_index":146,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modular",{"_index":824,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["multiple",{"_index":180,"title":{},"body":{"classes/Employee.html":{}}}],["mvc",{"_index":832,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":892,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["needs",{"_index":369,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["nest.js",{"_index":821,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":54,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"modules/AuthModule.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":128,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":288,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node",{"_index":542,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["node.oversees.foreach(child",{"_index":544,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["nodes",{"_index":168,"title":{},"body":{"classes/Employee.html":{}}}],["note",{"_index":864,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":270,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["notfoundexception('could",{"_index":289,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["npm",{"_index":857,"title":{},"body":{"index.html":{}}}],["null",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["number",{"_index":193,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeService.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{}}}],["ob",{"_index":528,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["ob[employee.id",{"_index":527,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["object",{"_index":843,"title":{},"body":{"index.html":{}}}],["object.keys(lookup).reduce((arr",{"_index":534,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["objects",{"_index":848,"title":{},"body":{"index.html":{}}}],["older",{"_index":441,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["one",{"_index":370,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"controllers/UsersController.html":{}}}],["onetomany",{"_index":215,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{}}}],["onetomany(t",{"_index":222,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{}}}],["onetomany(undefined",{"_index":197,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{}}}],["operator",{"_index":210,"title":{},"body":{"classes/Employee.html":{}}}],["optional",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":877,"title":{},"body":{"index.html":{}}}],["order",{"_index":412,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["otheremployee.reportsto",{"_index":488,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["otherwise",{"_index":458,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overridden",{"_index":873,"title":{},"body":{"index.html":{}}}],["oversee",{"_index":178,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["oversees",{"_index":184,"title":{},"body":{"classes/Employee.html":{}}}],["overview",{"_index":902,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwriting",{"_index":138,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":745,"title":{"dependencies.html":{}},"body":{}}],["pages",{"_index":817,"title":{},"body":{"index.html":{}}}],["paradigms",{"_index":838,"title":{},"body":{"index.html":{}}}],["param",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('employeenumber",{"_index":282,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["param('name",{"_index":291,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["param('surname",{"_index":292,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["parameter",{"_index":498,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["passed",{"_index":560,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passport",{"_index":566,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":51,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":58,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":567,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":569,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"index.html":{}}}],["passwordsmatch",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["patched",{"_index":453,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["pattern",{"_index":833,"title":{},"body":{"index.html":{}}}],["payload",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":552,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.username",{"_index":576,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["per",{"_index":363,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["performance",{"_index":854,"title":{},"body":{"index.html":{}}}],["persistence",{"_index":799,"title":{},"body":{"index.html":{}}}],["pg",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":647,"title":{},"body":{"classes/User.html":{}}}],["plaintext",{"_index":639,"title":{},"body":{"classes/User.html":{}}}],["plaintextpassword",{"_index":646,"title":{},"body":{"classes/User.html":{}}}],["post",{"_index":267,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('remove",{"_index":250,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{}}}],["post('save",{"_index":256,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{}}}],["postgres",{"_index":145,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":228,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{}}}],["prevent",{"_index":389,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["primarycolumn",{"_index":649,"title":{},"body":{"classes/User.html":{}}}],["primarycolumn({unique",{"_index":633,"title":{},"body":{"classes/User.html":{}}}],["primarygeneratedcolumn",{"_index":194,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{}}}],["private",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["process.env.database",{"_index":154,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_type",{"_index":153,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_url",{"_index":151,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":160,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["process.env.secret",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":139,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":791,"title":{},"body":{"index.html":{}}}],["promise",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["promise(async",{"_index":408,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["promise.all",{"_index":406,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["promise.all(employeeswhoreporttodelete.map(otheremployee",{"_index":487,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["properties",{"_index":181,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"interfaces/JwtPayload.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"index.html":{}}}],["provided",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"classes/User.html":{},"index.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":415,"title":{},"body":{"injectables/EmployeeService.html":{},"index.html":{}}}],["random",{"_index":885,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reasonably",{"_index":883,"title":{},"body":{"index.html":{}}}],["reduce",{"_index":835,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":805,"title":{},"body":{"index.html":{}}}],["relaible",{"_index":419,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["relation",{"_index":447,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["relational",{"_index":844,"title":{},"body":{"index.html":{}}}],["relations",{"_index":481,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["remove",{"_index":396,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["removed",{"_index":335,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["removed's",{"_index":485,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["removeemployee",{"_index":233,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["removeemployee(@body",{"_index":299,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["removeemployee(details",{"_index":248,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["removeemployeedto",{"_index":249,"title":{"classes/RemoveEmployeeDto.html":{}},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{},"classes/RemoveEmployeeDto.html":{},"coverage.html":{}}}],["removeemployeerole",{"_index":353,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["removeemployeerole(details",{"_index":365,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["removerole",{"_index":318,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["removerole(@body",{"_index":343,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["removerole(details",{"_index":327,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["removeroledto",{"_index":328,"title":{"classes/RemoveRoleDto.html":{}},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"classes/RemoveRoleDto.html":{},"coverage.html":{}}}],["removes",{"_index":252,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["replace",{"_index":395,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["replaced",{"_index":390,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["replacement",{"_index":330,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["replaces",{"_index":367,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["report",{"_index":170,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["reported",{"_index":179,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeService.html":{}}}],["reports",{"_index":171,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeService.html":{}}}],["reportsto",{"_index":185,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeService.html":{}}}],["reportstoemployee",{"_index":499,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["reportstoemployee.id",{"_index":503,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["reportstoemployeeid",{"_index":603,"title":{},"body":{"classes/SaveEmployeeDto.html":{}}}],["repository",{"_index":356,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["represented",{"_index":167,"title":{},"body":{"classes/Employee.html":{}}}],["represents",{"_index":164,"title":{},"body":{"classes/Employee.html":{},"classes/User.html":{}}}],["req",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":409,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["respond",{"_index":450,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["restful",{"_index":801,"title":{},"body":{"index.html":{}}}],["result",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result[role.id",{"_index":410,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["results",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":176,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["role.controller",{"_index":349,"title":{},"body":{"modules/EmployeeRoleModule.html":{}}}],["role.controller.ts",{"_index":314,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"coverage.html":{}}}],["role.controller.ts:17",{"_index":325,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["role.controller.ts:25",{"_index":321,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["role.controller.ts:37",{"_index":329,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["role.controller.ts:43",{"_index":324,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["role.dto",{"_index":336,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{}}}],["role.dto.ts",{"_index":596,"title":{},"body":{"classes/RemoveRoleDto.html":{},"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:10",{"_index":623,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["role.dto.ts:5",{"_index":599,"title":{},"body":{"classes/RemoveRoleDto.html":{}}}],["role.dto.ts:6",{"_index":621,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["role.dto.ts:8",{"_index":600,"title":{},"body":{"classes/RemoveRoleDto.html":{}}}],["role.entity",{"_index":132,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Employee.html":{},"modules/EmployeeModule.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["role.entity.ts",{"_index":308,"title":{},"body":{"classes/EmployeeRole.html":{},"coverage.html":{}}}],["role.entity.ts:10",{"_index":310,"title":{},"body":{"classes/EmployeeRole.html":{}}}],["role.entity.ts:13",{"_index":311,"title":{},"body":{"classes/EmployeeRole.html":{}}}],["role.entity.ts:16",{"_index":309,"title":{},"body":{"classes/EmployeeRole.html":{}}}],["role.id",{"_index":385,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["role.module.ts",{"_index":348,"title":{},"body":{"modules/EmployeeRoleModule.html":{}}}],["role.name",{"_index":386,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role.service",{"_index":339,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{}}}],["role.service.ts",{"_index":350,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"coverage.html":{}}}],["role.service.ts:108",{"_index":360,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role.service.ts:11",{"_index":358,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role.service.ts:22",{"_index":364,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role.service.ts:30",{"_index":372,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role.service.ts:59",{"_index":366,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["role/dto/remove",{"_index":595,"title":{},"body":{"classes/RemoveRoleDto.html":{},"coverage.html":{}}}],["role/dto/save",{"_index":620,"title":{},"body":{"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["role/employee",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"coverage.html":{}}}],["role/entities/employee",{"_index":131,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Employee.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeService.html":{},"coverage.html":{}}}],["roles",{"_index":326,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{}}}],["roles.map",{"_index":407,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["roletoremove",{"_index":397,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["roletoremoveid",{"_index":597,"title":{},"body":{"classes/RemoveRoleDto.html":{}}}],["roletoreplace",{"_index":398,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["roletoreplaceid",{"_index":598,"title":{},"body":{"classes/RemoveRoleDto.html":{}}}],["root",{"_index":539,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["roots",{"_index":533,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["run",{"_index":813,"title":{},"body":{"index.html":{}}}],["runs",{"_index":887,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["salary",{"_index":186,"title":{},"body":{"classes/Employee.html":{},"injectables/EmployeeRoleService.html":{},"classes/SaveEmployeeDto.html":{}}}],["same",{"_index":333,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{}}}],["save",{"_index":522,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["saveemployee",{"_index":234,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["saveemployee(@body",{"_index":297,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["saveemployee(details",{"_index":254,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["saveemployee(employeedetails",{"_index":456,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["saveemployeedto",{"_index":255,"title":{"classes/SaveEmployeeDto.html":{}},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{},"classes/SaveEmployeeDto.html":{},"coverage.html":{}}}],["saveemployeerole",{"_index":354,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["saveemployeerole(details",{"_index":371,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["saveroledto",{"_index":320,"title":{"classes/SaveRoleDto.html":{}},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["saves",{"_index":258,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{}}}],["search",{"_index":434,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["searchemployeebyname",{"_index":235,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["searchemployeebyname(name",{"_index":261,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["searches",{"_index":264,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["searchnode",{"_index":541,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["searchnode(child",{"_index":545,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["searchnode(root",{"_index":546,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["second",{"_index":438,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["secret",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":575,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":149,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["server.herokuapp.com",{"_index":794,"title":{},"body":{"index.html":{}}}],["set",{"_index":512,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["setpassword",{"_index":630,"title":{},"body":{"classes/User.html":{}}}],["setpassword(password",{"_index":635,"title":{},"body":{"classes/User.html":{}}}],["sets",{"_index":638,"title":{},"body":{"classes/User.html":{}}}],["setupadmin",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["shifting",{"_index":837,"title":{},"body":{"index.html":{}}}],["side",{"_index":796,"title":{},"body":{"index.html":{}}}],["signed",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{}}}],["similar",{"_index":831,"title":{},"body":{"index.html":{}}}],["simple",{"_index":846,"title":{},"body":{"index.html":{}}}],["single",{"_index":165,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"modules/EmployeeModule.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specified",{"_index":331,"title":{},"body":{"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{}}}],["sqlite",{"_index":137,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../users.service.ts",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":48,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:21",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:42",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/interfaces/jwt",{"_index":551,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":553,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:22",{"_index":557,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":555,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local",{"_index":577,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":123,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/employee",{"_index":307,"title":{},"body":{"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"modules/EmployeeRoleModule.html":{},"injectables/EmployeeRoleService.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["src/employee/dto/remove",{"_index":590,"title":{},"body":{"classes/RemoveEmployeeDto.html":{},"coverage.html":{}}}],["src/employee/dto/save",{"_index":601,"title":{},"body":{"classes/SaveEmployeeDto.html":{},"coverage.html":{}}}],["src/employee/employee.controller.ts",{"_index":227,"title":{},"body":{"controllers/EmployeeController.html":{},"coverage.html":{}}}],["src/employee/employee.controller.ts:19",{"_index":244,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.controller.ts:28",{"_index":242,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.controller.ts:45",{"_index":263,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.controller.ts:53",{"_index":239,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.controller.ts:63",{"_index":257,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.controller.ts:72",{"_index":251,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.controller.ts:82",{"_index":247,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["src/employee/employee.module.ts",{"_index":304,"title":{},"body":{"modules/EmployeeModule.html":{}}}],["src/employee/employee.service.ts",{"_index":414,"title":{},"body":{"injectables/EmployeeService.html":{},"coverage.html":{}}}],["src/employee/employee.service.ts:112",{"_index":457,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:16",{"_index":426,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:179",{"_index":427,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:221",{"_index":429,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:243",{"_index":449,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:28",{"_index":446,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:38",{"_index":445,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:48",{"_index":433,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:60",{"_index":440,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/employee.service.ts:74",{"_index":451,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["src/employee/entities/employee.entity.ts",{"_index":163,"title":{},"body":{"classes/Employee.html":{},"coverage.html":{}}}],["src/employee/entities/employee.entity.ts:16",{"_index":195,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:19",{"_index":196,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:22",{"_index":207,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:25",{"_index":192,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:28",{"_index":206,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:34",{"_index":202,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:40",{"_index":201,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:46",{"_index":198,"title":{},"body":{"classes/Employee.html":{}}}],["src/employee/entities/employee.entity.ts:52",{"_index":208,"title":{},"body":{"classes/Employee.html":{}}}],["src/main.ts",{"_index":742,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/entities/user.entity",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":625,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:12",{"_index":634,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:15",{"_index":632,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":636,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":641,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":679,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.service.ts:21",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":860,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":862,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":863,"title":{},"body":{"index.html":{}}}],["started",{"_index":787,"title":{"index.html":{}},"body":{}}],["statements",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["stored",{"_index":872,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":57,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local",{"_index":55,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":56,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy.ts",{"_index":578,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["strategy.ts:11",{"_index":583,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["strategy.ts:23",{"_index":585,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["string",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":452,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["successful",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["such",{"_index":454,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["super",{"_index":570,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["superior",{"_index":177,"title":{},"body":{"classes/Employee.html":{}}}],["support",{"_index":897,"title":{},"body":{"modules.html":{}}}],["surname",{"_index":187,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{},"classes/SaveEmployeeDto.html":{}}}],["svg",{"_index":898,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":156,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["table",{"_index":205,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["technical",{"_index":789,"title":{},"body":{"index.html":{}}}],["technologies",{"_index":818,"title":{},"body":{"index.html":{}}}],["test",{"_index":141,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covgenerating",{"_index":868,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":867,"title":{},"body":{"index.html":{}}}],["testconfig",{"_index":140,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":135,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tests",{"_index":815,"title":{},"body":{"index.html":{}}}],["text",{"_index":648,"title":{},"body":{"classes/User.html":{}}}],["than/:birthdate",{"_index":238,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["themself",{"_index":504,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["themselves",{"_index":173,"title":{},"body":{"classes/Employee.html":{}}}],["this.authservice.generatetoken(req.user",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.authservice.validateuser(username",{"_index":589,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.buildtrees",{"_index":538,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerepository.createquerybuilder",{"_index":468,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerepository.find",{"_index":400,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["this.employeerepository.finddescendants(employee",{"_index":509,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerepository.findone",{"_index":411,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["this.employeerepository.findoneorfail(id",{"_index":467,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerepository.remove(employee",{"_index":492,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerepository.save",{"_index":401,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["this.employeerepository.save(employee",{"_index":523,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerepository.save(otheremployee",{"_index":490,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.employeerolerepository.find",{"_index":379,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["this.employeerolerepository.findone",{"_index":381,"title":{},"body":{"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["this.employeerolerepository.remove(roletoremove",{"_index":405,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["this.employeerolerepository.save(role",{"_index":388,"title":{},"body":{"injectables/EmployeeRoleService.html":{}}}],["this.employeeroleservice.findhighestpaidemployeeperrole",{"_index":345,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["this.employeeroleservice.getemployeeroles",{"_index":340,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["this.employeeroleservice.removeemployeerole(details",{"_index":344,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["this.employeeroleservice.saveemployeerole(details",{"_index":342,"title":{},"body":{"controllers/EmployeeRoleController.html":{}}}],["this.employeeservice.findemployeebyname(name",{"_index":293,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.employeeservice.findemployeesolderthan(birthdate",{"_index":296,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.employeeservice.getemployee(employeenumber",{"_index":284,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.employeeservice.getemployees",{"_index":281,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.employeeservice.gethierarchy",{"_index":301,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.employeeservice.removeemployee(details",{"_index":300,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.employeeservice.saveemployee(details",{"_index":298,"title":{},"body":{"controllers/EmployeeController.html":{}}}],["this.finddescendants(employee",{"_index":506,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["this.jwtservice.sign(payload",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":652,"title":{},"body":{"classes/User.html":{}}}],["this.salary",{"_index":224,"title":{},"body":{"classes/Employee.html":{}}}],["this.setupadmin",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(username",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(adminuser",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.finduser(username",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":287,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"injectables/LocalStrategy.html":{}}}],["time",{"_index":836,"title":{},"body":{"index.html":{}}}],["todo",{"_index":507,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["token",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["tokens",{"_index":881,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["tree",{"_index":169,"title":{},"body":{"classes/Employee.html":{},"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["treerepository",{"_index":461,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["trees",{"_index":547,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["trees.roots",{"_index":548,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["true",{"_index":157,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeService.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["try",{"_index":283,"title":{},"body":{"controllers/EmployeeController.html":{},"injectables/EmployeeService.html":{}}}],["type",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/Employee.html":{},"controllers/EmployeeController.html":{},"classes/EmployeeRole.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":216,"title":{},"body":{"classes/Employee.html":{},"classes/EmployeeRole.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":126,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":306,"title":{},"body":{"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":683,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":155,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":127,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["types/dotenv",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":827,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":587,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":152,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Employee.html":{},"classes/EmployeeRole.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":651,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":814,"title":{},"body":{"index.html":{}}}],["update",{"_index":484,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["updates",{"_index":260,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"injectables/EmployeeRoleService.html":{},"injectables/EmployeeService.html":{}}}],["url",{"_index":147,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":159,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["used",{"_index":842,"title":{},"body":{"index.html":{}}}],["useful",{"_index":803,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":269,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('jwt",{"_index":279,"title":{},"body":{"controllers/EmployeeController.html":{},"controllers/EmployeeRoleController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@get('verify",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('login",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["useless",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["user",{"_index":86,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["user's",{"_index":643,"title":{},"body":{"classes/User.html":{}}}],["user.username",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.validatepassword(password",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users",{"_index":581,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users.controller",{"_index":682,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":680,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":133,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users/users.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":656,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":16,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":77,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":136,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Employee.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":820,"title":{},"body":{"index.html":{}}}],["valid",{"_index":564,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["validate",{"_index":554,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":556,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":584,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatepassword",{"_index":631,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(plaintextpassword",{"_index":640,"title":{},"body":{"classes/User.html":{}}}],["validates",{"_index":586,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":594,"title":{},"body":{"classes/RemoveEmployeeDto.html":{},"classes/RemoveRoleDto.html":{},"classes/SaveEmployeeDto.html":{},"classes/SaveRoleDto.html":{},"dependencies.html":{}}}],["value",{"_index":559,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["valueof",{"_index":188,"title":{},"body":{"classes/Employee.html":{}}}],["variable",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":907,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":642,"title":{},"body":{"classes/User.html":{}}}],["verify",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifytoken",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["very",{"_index":830,"title":{},"body":{"index.html":{}}}],["watch",{"_index":861,"title":{},"body":{"index.html":{}}}],["well",{"_index":851,"title":{},"body":{"index.html":{}}}],["where('lower(name",{"_index":469,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["without",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["working",{"_index":840,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":475,"title":{},"body":{"injectables/EmployeeService.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmployeeModule.html":{},"modules/EmployeeRoleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmployeeModule\n\nEmployeeModule\n\nAppModule -->\n\nEmployeeModule->AppModule\n\n\n\n\n\nEmployeeRoleModule\n\nEmployeeRoleModule\n\nAppModule -->\n\nEmployeeRoleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmployeeModule\n                        \n                        \n                            EmployeeRoleModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheModule } from '@nestjs/common';\nimport { EmployeeModule } from './employee/employee.module';\nimport { DatabaseModule } from './database/database.module';\nimport { EmployeeRoleModule } from './employee-role/employee-role.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    CacheModule.register(),\n\n    DatabaseModule,\n\n    AuthModule,\n    UsersModule,\n\n    EmployeeModule,\n    EmployeeRoleModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { LocalStrategy } from './strategies/local-strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      secret: process.env.SECRET,\n      signOptions: {\n        expiresIn: '7d',\n      },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:42\n                \n            \n\n\n            \n                \n                    Returns a signed jwt token for the given user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n                    Check that the provided user exists and that their password\nmatches the provided. If either of these conditions fails,\nreturns null. If successful, returns the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/users/entities/user.entity';\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Check that the provided user exists and that their password\n   * matches the provided. If either of these conditions fails,\n   * returns null. If successful, returns the user.\n   * @param username\n   * @param password\n   */\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.usersService.findUser(username);\n\n    // check that the user exists\n    if (!user) {\n      return null;\n    }\n\n    // check that the password matches\n    const passwordsMatch = await user.validatePassword(password);\n    if (!passwordsMatch) {\n      return null;\n    }\n\n    return user;\n  }\n\n  /**\n   * Returns a signed jwt token for the given user\n   * @param user\n   */\n  async generateToken(user: User) {\n    const payload: JwtPayload = {\n      username: user.username,\n    };\n\n    return this.jwtService.sign(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Database module\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Employee } from '../employee/entities/employee.entity';\nimport { EmployeeRole } from '../employee-role/entities/employee-role.entity';\nimport { User } from '../users/entities/user.entity';\n\n/**\n * Configuration for testing. Uses SQLite rather than overwriting\n * the production database.\n */\nconst testConfig: TypeOrmModuleOptions = {\n  type: 'sqlite',\n  database: 'test-database.sqlite',\n};\n\n/**\n * The default database configuration. Defaults to postgres for\n * production mode. The database url would be given by the deployment\n * server.\n */\nconst defaultConfig: TypeOrmModuleOptions = {\n  url: process.env.DATABASE_URL || undefined,\n  type: (process.env.DATABASE_TYPE as any) || 'postgres',\n  database: process.env.DATABASE || undefined,\n};\n\n/**\n * Database module\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      synchronize: true,\n      // if in the test environment use the test configuration\n      ...(process.env.NODE_ENV === 'test' ? testConfig : defaultConfig),\n\n      entities: [User, Employee, EmployeeRole],\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Employee.html":{"url":"classes/Employee.html","title":"class - Employee","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Employee\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee/entities/employee.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents a single employee. Employees are represented as nodes\nin a tree. An employee may not report to an employee that reports\nto them in the hierarchy, nor may they report to themselves\n(i.e. no loops).\nEvery employee has a role.\nAn employee may report to a single superior.\nAn employee may oversee or be reported to by multiple employees.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthdate\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                oversees\n                            \n                            \n                                reportsTo\n                            \n                            \n                                role\n                            \n                            \n                                salary\n                            \n                            \n                                surname\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                valueOf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthdate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            oversees\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Employee[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:46\n                            \n                        \n\n                \n                    \n                        An employee may oversee many employees\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reportsTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Employee\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:40\n                            \n                        \n\n                \n                    \n                        An employee may report to a single employee\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EmployeeRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:34\n                            \n                        \n\n                \n                    \n                        An employee has a certain role, defined in the EmployeeRole lookup table\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            surname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/entities/employee.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            valueOf\n                        \n                        \n                    \n                \n            \n            \n                \nvalueOf()\n                \n            \n\n\n            \n                \n                    Defined in src/employee/entities/employee.entity.ts:52\n                \n            \n\n\n            \n                \n                    Comparison operator for employees.\nUses the Employee's salary as means for comparison\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from 'typeorm';\nimport { EmployeeRole } from '../../employee-role/entities/employee-role.entity';\n\n/**\n * Represents a single employee. Employees are represented as nodes\n * in a tree. An employee may not report to an employee that reports\n * to them in the hierarchy, nor may they report to themselves\n * (i.e. no loops).\n * Every employee has a role.\n * An employee may report to a single superior.\n * An employee may oversee or be reported to by multiple employees.\n */\n@Entity()\nexport class Employee {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  surname: string;\n\n  @Column()\n  birthdate: Date;\n\n  @Column()\n  salary: number;\n\n  /**\n   * An employee has a certain role, defined in the EmployeeRole lookup table\n   */\n  @ManyToOne(type => EmployeeRole, employeeRole => employeeRole.employees)\n  role: EmployeeRole;\n\n  /**\n   * An employee may report to a single employee\n   */\n  @ManyToOne(t => Employee, e => e.oversees)\n  reportsTo: Employee;\n\n  /**\n   * An employee may oversee many employees\n   */\n  @OneToMany(t => Employee, e => e.reportsTo)\n  oversees: Employee[];\n\n  /**\n   * Comparison operator for employees.\n   * Uses the Employee's salary as means for comparison\n   */\n  valueOf(): number {\n    return this.salary;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmployeeController.html":{"url":"controllers/EmployeeController.html","title":"controller - EmployeeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmployeeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee/employee.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                employee\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findEmployeesOlderThanDate\n                            \n                            \n                                    Async\n                                getEmployeeById\n                            \n                            \n                                    Async\n                                getEmployees\n                            \n                            \n                                    Async\n                                getHierarchy\n                            \n                            \n                                    Async\n                                removeEmployee\n                            \n                            \n                                    Async\n                                saveEmployee\n                            \n                            \n                                    Async\n                                searchEmployeeByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findEmployeesOlderThanDate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findEmployeesOlderThanDate(birthdate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/older-than/:birthdate')\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    birthdate\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEmployeeById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEmployeeById(employeeNumber: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/id/:employeeNumber')\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:28\n                \n            \n\n\n            \n                \n                    Returns a single employee by employee number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    employeeNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The employee's employee number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEmployees\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEmployees()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:19\n                \n            \n\n\n            \n                \n                    Returns a list of all employees in the database\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHierarchy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHierarchy()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('hierarchy')\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:82\n                \n            \n\n\n            \n                \n                    Returns a tree hierarchy of all employees by who they oversee\nand report to.\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeEmployee\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEmployee(details: RemoveEmployeeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('remove')\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:72\n                \n            \n\n\n            \n                \n                    Removes an employee from the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                RemoveEmployeeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveEmployee\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEmployee(details: SaveEmployeeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save')\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:63\n                \n            \n\n\n            \n                \n                    Saves an employee. If the employee already exists, updates.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                SaveEmployeeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchEmployeeByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchEmployeeByName(name: string, surname: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/name/:name/:surname')\n                \n            \n\n            \n                \n                    Defined in src/employee/employee.controller.ts:45\n                \n            \n\n\n            \n                \n                    Searches for a single employee by name and surname\nName is case-insensitive\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    surname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Param, UseGuards, NotFoundException } from '@nestjs/common';\nimport { EmployeeService } from './employee.service';\n\nimport { Employee } from './entities/employee.entity';\n\nimport { SaveEmployeeDto } from './dto/save-employee.dto';\nimport { RemoveEmployeeDto } from './dto/remove-employee.dto';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('employee')\n@UseGuards(AuthGuard('jwt'))\nexport class EmployeeController {\n  constructor(private readonly employeeService: EmployeeService) {}\n\n  /**\n   * Returns a list of all employees in the database\n   */\n  @Get()\n  async getEmployees(): Promise {\n    return await this.employeeService.getEmployees();\n  }\n\n  /**\n   * Returns a single employee by employee number\n   * @param employeeNumber The employee's employee number\n   */\n  @Get('search/id/:employeeNumber')\n  async getEmployeeById(\n    @Param('employeeNumber') employeeNumber: number,\n  ): Promise {\n    try {\n      return await this.employeeService.getEmployee(employeeNumber);\n    } catch (exception) {\n      throw new NotFoundException('Could not find an entity with that name');\n    }\n  }\n\n  /**\n   * Searches for a single employee by name and surname\n   * Name is case-insensitive\n   * @param name\n   * @param surname\n   */\n  @Get('search/name/:name/:surname')\n  async searchEmployeeByName(\n    @Param('name') name: string,\n    @Param('surname') surname: string,\n  ): Promise {\n    return await this.employeeService.findEmployeeByName(name, surname);\n  }\n\n  @Get('search/older-than/:birthdate')\n  async findEmployeesOlderThanDate(@Param('birthdate') birthdate): Promise {\n    birthdate = new Date(birthdate);\n    return await this.employeeService.findEmployeesOlderThan(birthdate);\n  }\n\n  /**\n   * Saves an employee. If the employee already exists, updates.\n   * @param details\n   */\n  @Post('save')\n  async saveEmployee(@Body() details: SaveEmployeeDto): Promise {\n    return await this.employeeService.saveEmployee(details);\n  }\n\n  /**\n   * Removes an employee from the database.\n   * @param details\n   */\n  @Post('remove')\n  async removeEmployee(@Body() details: RemoveEmployeeDto) {\n    await this.employeeService.removeEmployee(details);\n    return true;\n  }\n\n  /**\n   * Returns a tree hierarchy of all employees by who they oversee\n   * and report to.\n   */\n  @Get('hierarchy')\n  async getHierarchy(): Promise {\n    return await this.employeeService.getHierarchy();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmployeeModule.html":{"url":"modules/EmployeeModule.html","title":"module - EmployeeModule","body":"\n                   \n\n\n\n\n    Modules\n    EmployeeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmployeeModule\n\n\n\ncluster_EmployeeModule_providers\n\n\n\n\nEmployeeService\n\nEmployeeService\n\n\n\nEmployeeModule\n\nEmployeeModule\n\nEmployeeModule -->\n\nEmployeeService->EmployeeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/employee/employee.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmployeeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmployeeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmployeeService } from './employee.service';\nimport { EmployeeController } from './employee.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Employee } from './entities/employee.entity';\nimport { EmployeeRole } from '../employee-role/entities/employee-role.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Employee, EmployeeRole,\n    ]),\n  ],\n  providers: [EmployeeService],\n  controllers: [EmployeeController],\n})\nexport class EmployeeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmployeeRole.html":{"url":"classes/EmployeeRole.html","title":"class - EmployeeRole","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmployeeRole\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee-role/entities/employee-role.entity.ts\n        \n\n            \n                Description\n            \n            \n                Employee role lookup table\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                employees\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employees\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Employee[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/entities/employee-role.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/entities/employee-role.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/entities/employee-role.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { Employee } from '../../employee/entities/employee.entity';\n\n/**\n * Employee role lookup table\n */\n@Entity()\nexport class EmployeeRole {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(t => Employee, e => e.role)\n  employees: Employee[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmployeeRoleController.html":{"url":"controllers/EmployeeRoleController.html","title":"controller - EmployeeRoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmployeeRoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee-role/employee-role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                employee-role\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addRole\n                            \n                            \n                                    Async\n                                getHighestEarningbyRole\n                            \n                            \n                                    Async\n                                getRoles\n                            \n                            \n                                    Async\n                                removeRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRole(details: SaveRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save')\n                \n            \n\n            \n                \n                    Defined in src/employee-role/employee-role.controller.ts:25\n                \n            \n\n\n            \n                \n                    Saves an employee role. If the role already exists, updates.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                SaveRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHighestEarningbyRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHighestEarningbyRole()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('highest-earning-by-role')\n                \n            \n\n            \n                \n                    Defined in src/employee-role/employee-role.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRoles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoles()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/employee-role/employee-role.controller.ts:17\n                \n            \n\n\n            \n                \n                    Returns a list of all the employee roles in the database\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRole(details: RemoveRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('remove')\n                \n            \n\n            \n                \n                    Defined in src/employee-role/employee-role.controller.ts:37\n                \n            \n\n\n            \n                \n                    Removes a role from the database. A replacement role is specified.\nThe replacement role must exist and not be the same as the role\nbeing removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                RemoveRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, UseGuards } from '@nestjs/common';\nimport { SaveRoleDto } from './dto/save-role.dto';\nimport { EmployeeRole } from './entities/employee-role.entity';\nimport { RemoveRoleDto } from './dto/remove-role.dto';\nimport { EmployeeRoleService } from './employee-role.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('employee-role')\n@UseGuards(AuthGuard('jwt'))\nexport class EmployeeRoleController {\n  constructor(private readonly employeeRoleService: EmployeeRoleService) {}\n\n  /**\n   * Returns a list of all the employee roles in the database\n   */\n  @Get()\n  async getRoles(): Promise {\n    return await this.employeeRoleService.getEmployeeRoles();\n  }\n\n  /**\n   * Saves an employee role. If the role already exists, updates.\n   */\n  @Post('save')\n  async addRole(@Body() details: SaveRoleDto) {\n    await this.employeeRoleService.saveEmployeeRole(details);\n    return true;\n  }\n\n  /**\n   * Removes a role from the database. A replacement role is specified.\n   * The replacement role must exist and not be the same as the role\n   * being removed.\n   * @param details\n   */\n  @Post('remove')\n  async removeRole(@Body() details: RemoveRoleDto) {\n    await this.employeeRoleService.removeEmployeeRole(details);\n    return true;\n  }\n\n  @Get('highest-earning-by-role')\n  async getHighestEarningbyRole() {\n    return await this.employeeRoleService.findHighestPaidEmployeePerRole();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmployeeRoleModule.html":{"url":"modules/EmployeeRoleModule.html","title":"module - EmployeeRoleModule","body":"\n                   \n\n\n\n\n    Modules\n    EmployeeRoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmployeeRoleModule\n\n\n\ncluster_EmployeeRoleModule_providers\n\n\n\n\nEmployeeRoleService\n\nEmployeeRoleService\n\n\n\nEmployeeRoleModule\n\nEmployeeRoleModule\n\nEmployeeRoleModule -->\n\nEmployeeRoleService->EmployeeRoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/employee-role/employee-role.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmployeeRoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmployeeRoleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Employee } from '../employee/entities/employee.entity';\nimport { EmployeeRole } from './entities/employee-role.entity';\nimport { EmployeeRoleService } from './employee-role.service';\nimport { EmployeeRoleController } from './employee-role.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      EmployeeRole, Employee,\n    ]),\n  ],\n  providers: [\n    EmployeeRoleService,\n  ],\n  controllers: [\n    EmployeeRoleController,\n  ],\n})\nexport class EmployeeRoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmployeeRoleService.html":{"url":"injectables/EmployeeRoleService.html","title":"injectable - EmployeeRoleService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmployeeRoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee-role/employee-role.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findHighestPaidEmployeePerRole\n                            \n                            \n                                    Async\n                                getEmployeeRoles\n                            \n                            \n                                    Async\n                                removeEmployeeRole\n                            \n                            \n                                    Async\n                                saveEmployeeRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(employeeRepository: Repository, employeeRoleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/employee-role/employee-role.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        employeeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        employeeRoleRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findHighestPaidEmployeePerRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findHighestPaidEmployeePerRole()\n                \n            \n\n\n            \n                \n                    Defined in src/employee-role/employee-role.service.ts:108\n                \n            \n\n\n            \n                \n                    Finds the highest earning employee per employee role\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEmployeeRoles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEmployeeRoles()\n                \n            \n\n\n            \n                \n                    Defined in src/employee-role/employee-role.service.ts:22\n                \n            \n\n\n            \n                \n                    Returns all employee roles from the database\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeEmployeeRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEmployeeRole(details: RemoveRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/employee-role/employee-role.service.ts:59\n                \n            \n\n\n            \n                \n                    Removes the role with the given id from the database.\nReplaces all employees who had the role with the specified\nrole. There always needs to be at least one role.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                RemoveRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveEmployeeRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEmployeeRole(details: SaveRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/employee-role/employee-role.service.ts:30\n                \n            \n\n\n            \n                \n                    Inserts or updates an existing employee role.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                SaveRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException } from '@nestjs/common';\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Employee } from '../employee/entities/employee.entity';\nimport { EmployeeRole } from './entities/employee-role.entity';\nimport { Repository } from 'typeorm';\nimport { SaveRoleDto } from './dto/save-role.dto';\nimport { RemoveRoleDto } from './dto/remove-role.dto';\n\n@Injectable()\nexport class EmployeeRoleService {\n  constructor(\n    @InjectRepository(Employee)\n    private readonly employeeRepository: Repository,\n    @InjectRepository(EmployeeRole)\n    private readonly employeeRoleRepository: Repository,\n  ) {}\n\n  /**\n   * Returns all employee roles from the database\n   */\n  async getEmployeeRoles(): Promise {\n    return await this.employeeRoleRepository.find();\n  }\n\n  /**\n   * Inserts or updates an existing employee role.\n   * @param details\n   */\n  async saveEmployeeRole(details: SaveRoleDto) {\n    // find existing role if id provided\n    let role = !details.id\n      ? null\n      : await this.employeeRoleRepository.findOne({\n          where: {\n            id: details.id,\n          },\n        });\n\n    // role doesn't exist, so create it\n    if (!role) {\n      role = new EmployeeRole();\n      // assign role id if given\n      if (details.id) {\n        role.id = details.id;\n      }\n    }\n\n    role.name = details.name;\n\n    await this.employeeRoleRepository.save(role);\n  }\n\n  /**\n   * Removes the role with the given id from the database.\n   * Replaces all employees who had the role with the specified\n   * role. There always needs to be at least one role.\n   */\n  async removeEmployeeRole(details: RemoveRoleDto) {\n    // prevent a role being replaced by itself\n    if (details.roleToRemoveId === details.roleToReplaceId) {\n      throw new BadRequestException('Cannot replace removed role with the same role');\n    }\n\n    // find the role to remove\n    const roleToRemove = await this.employeeRoleRepository.findOne({\n      where: {\n        id: details.roleToRemoveId,\n      },\n    });\n\n    if (!roleToRemove) {\n      throw new BadRequestException('Cannot find an employee role to remove with that id');\n    }\n\n    // find the role to replace with\n    const roleToReplace = await this.employeeRoleRepository.findOne({\n      where: {\n        id: details.roleToReplaceId,\n      },\n    });\n\n    if (!roleToReplace) {\n      throw new BadRequestException('Cannot find an employee role to replace with that id');\n    }\n\n    // all employees who have the roles to be removed have their role replaced\n    const employeesWithRole = await this.employeeRepository.find({\n      where: {\n        role: roleToRemove,\n      },\n    });\n\n    await this.employeeRepository.save(\n      employeesWithRole.map(employee => {\n        employee.role = roleToReplace;\n        return employee;\n      }),\n    );\n\n    // finally remove the role\n    await this.employeeRoleRepository.remove(roleToRemove);\n  }\n\n  /**\n   * Finds the highest earning employee per employee role\n   */\n  async findHighestPaidEmployeePerRole(): Promise {\n    const roles = await this.employeeRoleRepository.find();\n\n    const result = {};\n\n    await Promise.all(\n      roles.map(\n        role =>\n          new Promise(async resolve => {\n            result[role.id] = await this.employeeRepository.findOne({\n              where: {\n                role,\n              },\n              order: {\n                salary: 'DESC',\n              },\n            } as any);\n            resolve();\n          }),\n      ),\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmployeeService.html":{"url":"injectables/EmployeeService.html","title":"injectable - EmployeeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmployeeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee/employee.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functions for interacting with employee entities\nin a convenient and relaible manner.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                buildTrees\n                            \n                            \n                                    Private\n                                    Async\n                                findDescendants\n                            \n                            \n                                    Async\n                                findEmployeeByName\n                            \n                            \n                                    Async\n                                findEmployeesOlderThan\n                            \n                            \n                                    Async\n                                getEmployee\n                            \n                            \n                                    Async\n                                getEmployees\n                            \n                            \n                                    Async\n                                getHierarchy\n                            \n                            \n                                    Async\n                                removeEmployee\n                            \n                            \n                                    Async\n                                saveEmployee\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(employeeRepository: Repository, employeeRoleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/employee/employee.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        employeeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        employeeRoleRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            buildTrees\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildTrees()\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:179\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findDescendants\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDescendants(employee: Employee)\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:221\n                \n            \n\n\n            \n                \n                    Finds all descendant employees for the given employee.\nIncludes itself.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employee\n                                    \n                                                Employee\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findEmployeeByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findEmployeeByName(name, surname)\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:48\n                \n            \n\n\n            \n                \n                    Search for an Employee by exact match of name and surname.\nCase-insensitive.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Employee's first name\n\n                                    \n                                \n                                \n                                    surname\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Employee's second name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findEmployeesOlderThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findEmployeesOlderThan(birthdate: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:60\n                \n            \n\n\n            \n                \n                    Find employees older than a certain date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    birthdate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Date to find employees born before\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEmployee\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEmployee(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:38\n                \n            \n\n\n            \n                \n                    Finds an employee by employee number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEmployees\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEmployees()\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:28\n                \n            \n\n\n            \n                \n                    Return all employees in the database with their relation ids\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHierarchy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHierarchy()\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:243\n                \n            \n\n\n            \n                \n                    Returns the employee hierarchy by who they oversee\nand respond to\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeEmployee\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEmployee(details: RemoveEmployeeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:74\n                \n            \n\n\n            \n                \n                    Removes an employee from the database. The tree structure is\npatched such that any employee that reported to the employee\ninstead reports to the employee they reported to.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                RemoveEmployeeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveEmployee\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEmployee(employeeDetails: SaveEmployeeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/employee/employee.service.ts:112\n                \n            \n\n\n            \n                \n                    If an employee with the given employee number exists, updates the existing\nemployee. Otherwise creates a new employee entity with the given details.\nIf the employee number is given and the employee does not exist, creates an\nemployee entity with the given id.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    employeeDetails\n                                    \n                                                SaveEmployeeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException } from '@nestjs/common';\nimport { Repository, TreeRepository, LessThan } from 'typeorm';\n\nimport { Employee } from './entities/employee.entity';\nimport { EmployeeRole } from '../employee-role/entities/employee-role.entity';\nimport { SaveEmployeeDto } from './dto/save-employee.dto';\nimport { InjectRepository, InjectEntityManager } from '@nestjs/typeorm';\nimport { RemoveEmployeeDto } from './dto/remove-employee.dto';\nimport { format } from 'date-fns';\n\n/**\n * Provides functions for interacting with employee entities\n * in a convenient and relaible manner.\n */\n@Injectable()\nexport class EmployeeService {\n  constructor(\n    @InjectRepository(Employee)\n    private readonly employeeRepository: Repository,\n\n    @InjectRepository(EmployeeRole)\n    private readonly employeeRoleRepository: Repository,\n  ) {}\n\n  /**\n   * Return all employees in the database with their relation ids\n   */\n  async getEmployees(): Promise {\n    return await this.employeeRepository.find({\n      loadRelationIds: true,\n    });\n  }\n\n  /**\n   * Finds an employee by employee number\n   * @param id\n   */\n  async getEmployee(id: number) {\n    return await this.employeeRepository.findOneOrFail(id);\n  }\n\n  /**\n   * Search for an Employee by exact match of name and surname.\n   * Case-insensitive.\n   * @param name Employee's first name\n   * @param surname Employee's second name\n   */\n  async findEmployeeByName(name, surname): Promise {\n    return await this.employeeRepository.createQueryBuilder()\n      .where('LOWER(name) = LOWER(:name) AND LOWER(surname) = LOWER(:surname)', {\n        name, surname,\n      })\n      .getOne();\n  }\n\n  /**\n   * Find employees older than a certain date\n   * @param birthdate Date to find employees born before\n   */\n  async findEmployeesOlderThan(birthdate: Date): Promise {\n    return await this.employeeRepository.find({\n      where: {\n        birthdate: LessThan(format(birthdate, 'YYYY-MM-DD HH:MM:SS')),\n      },\n    });\n  }\n\n  /**\n   * Removes an employee from the database. The tree structure is\n   * patched such that any employee that reported to the employee\n   * instead reports to the employee they reported to.\n   * @param details\n   */\n  async removeEmployee(details: RemoveEmployeeDto) {\n    const employee = await this.employeeRepository.findOne({\n      where: {\n        id: details.employeeNumber,\n      },\n      loadEagerRelations: true,\n      relations: ['reportsTo'],\n    });\n    if (!employee) {\n      throw new BadRequestException('An employee with that id does not exist');\n    }\n\n    // find all employees who reported to the employee being removed\n    const employeesWhoReportToDelete = await this.employeeRepository.find({\n      where: {\n        reportsTo: employee,\n      },\n    });\n\n    // update the employees' reportsTo to the employee being removed's reportsTo field\n    await Promise.all(employeesWhoReportToDelete.map(otherEmployee => new Promise(async resolve => {\n      otherEmployee.reportsTo = employee.reportsTo || null;\n      await this.employeeRepository.save(otherEmployee);\n      resolve();\n    })));\n\n    // finally remove the employee\n    const id = employee.id;\n    await this.employeeRepository.remove(employee);\n  }\n\n  /**\n   * If an employee with the given employee number exists, updates the existing\n   * employee. Otherwise creates a new employee entity with the given details.\n   * If the employee number is given and the employee does not exist, creates an\n   * employee entity with the given id.\n   * @param employeeDetails\n   */\n  async saveEmployee(employeeDetails: SaveEmployeeDto): Promise {\n    // try find the existing employee in the database if the employee number\n    // is given and the employee exists\n    let employee = !employeeDetails.employeeNumber\n      ? null\n      : await this.employeeRepository.findOne({\n          where: {\n            id: employeeDetails.employeeNumber,\n          },\n        });\n\n    // if the employee does not exist, then create a new entity\n    if (!employee) {\n      employee = new Employee();\n      // assign the employee number if given, otherwise the entity will have one generated\n      if (employeeDetails.employeeNumber) {\n        employee.id = employeeDetails.employeeNumber;\n      }\n    }\n\n    // get the employee role and ensure it exists\n    const employeeRole = await this.employeeRoleRepository.findOne({\n      where: {\n        id: employeeDetails.employeeRoleId,\n      },\n    });\n\n    if (!employeeRole) {\n      throw new BadRequestException('The provided employee role does not exist');\n    }\n\n    // find and check that the \"reports to\" employee exists if the parameter was given\n    const reportsToEmployee = !employeeDetails.reportsToEmployeeId\n      ? null\n      : await this.employeeRepository.findOne({\n          where: {\n            id: employeeDetails.reportsToEmployeeId,\n          },\n        });\n\n    // if the employee id was given and the employee could not be found throw an error\n    if (employeeDetails.reportsToEmployeeId && !reportsToEmployee) {\n      throw new BadRequestException('The \"reports to\" employee could not be found');\n    }\n\n    // prevent loops in tree structure\n    if (reportsToEmployee && reportsToEmployee.id === employee.id) {\n      throw new BadRequestException('An employee cannot report to themself');\n    }\n\n    const descendants = await this.findDescendants(employee); // TODO: fix await this.employeeRepository.findDescendants(employee);\n    if (reportsToEmployee && descendants.find(descendant => descendant.id === reportsToEmployee.id)) {\n      throw new BadRequestException('An employee cannot report to an employee who reports to them');\n    }\n\n    // set the employee entity's details\n    employee.name = employeeDetails.name;\n    employee.surname = employeeDetails.surname;\n    employee.birthdate = new Date(employeeDetails.birthdate);\n    employee.salary = employeeDetails.salary;\n    employee.role = employeeRole;\n    employee.reportsTo = reportsToEmployee;\n\n    // save the employee\n    return await this.employeeRepository.save(employee);\n  }\n\n  private async buildTrees(): Promise {\n    const employees = (await this.employeeRepository.find({\n      loadRelationIds: true,\n    }));\n    employees.forEach(employee => {\n      employee.oversees = [];\n    });\n\n    const lookup = employees.reduce((ob, employee) => {\n      ob[employee.id] = employee;\n      return ob;\n    }, {});\n\n    employees.forEach(employee => {\n      if (!employee.reportsTo) {\n        return;\n      }\n      // add the employee to the list of children\n      lookup[employee.reportsTo as any].oversees.push(employee);\n    });\n\n    const roots = Object.keys(lookup).reduce((arr, id) => {\n      const employee: Employee = lookup[id];\n      if (!employee.reportsTo) {\n        arr.push(employee);\n      }\n      return arr;\n    }, []);\n\n    return {\n      lookup,\n      roots,\n    };\n  }\n\n  /**\n   * Finds all descendant employees for the given employee.\n   * Includes itself.\n   */\n  private async findDescendants(employee: Employee): Promise {\n    const { lookup } = await this.buildTrees();\n\n    const root = lookup[employee.id];\n\n    if (!root) {\n      return [];\n    }\n\n    const searchNode = (node: Employee, descendants = []) => {\n      descendants.push(node);\n      node.oversees.forEach(child => searchNode(child, descendants));\n      return descendants;\n    };\n\n    return searchNode(root);\n  }\n\n  /**\n   * Returns the employee hierarchy by who they oversee\n   * and respond to\n   */\n  async getHierarchy(): Promise {\n    const trees = await this.buildTrees();\n\n    return trees.roots;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:22\n                \n            \n\n\n            \n                \n                    Determines value passed on.\nWe are guaranteed to only ever have this function called\nwhen the token was valid.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.SECRET,\n    });\n  }\n\n  /**\n   * Determines value passed on.\n   * We are guaranteed to only ever have this function called\n   * when the token was valid.\n   * @param payload\n   */\n  async validate(payload: any): Promise {\n    return {\n      username: payload.username,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local-strategy.ts\n        \n\n            \n                Description\n            \n            \n                Authentication strategy that compares username and\npassword to users in the database.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local-strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local-strategy.ts:23\n                \n            \n\n\n            \n                \n                    Validates that a user exists\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n/**\n * Authentication strategy that compares username and\n * password to users in the database.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n  ) {\n    super();\n  }\n\n  /**\n   * Validates that a user exists\n   * @param username\n   * @param password\n   */\n  async validate(username: string, password: string) {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveEmployeeDto.html":{"url":"classes/RemoveEmployeeDto.html","title":"class - RemoveEmployeeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveEmployeeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee/dto/remove-employee.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                employeeNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/remove-employee.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nexport class RemoveEmployeeDto {\n  @IsNumber()\n  employeeNumber: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveRoleDto.html":{"url":"classes/RemoveRoleDto.html","title":"class - RemoveRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee-role/dto/remove-role.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roleToRemoveId\n                            \n                            \n                                roleToReplaceId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roleToRemoveId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/dto/remove-role.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roleToReplaceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/dto/remove-role.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nexport class RemoveRoleDto {\n  @IsNumber()\n  roleToRemoveId: number;\n\n  @IsNumber()\n  roleToReplaceId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveEmployeeDto.html":{"url":"classes/SaveEmployeeDto.html","title":"class - SaveEmployeeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveEmployeeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee/dto/save-employee.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthdate\n                            \n                            \n                                    Optional\n                                employeeNumber\n                            \n                            \n                                employeeRoleId\n                            \n                            \n                                name\n                            \n                            \n                                reportsToEmployeeId\n                            \n                            \n                                salary\n                            \n                            \n                                surname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthdate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            employeeNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            employeeRoleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@Length(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reportsToEmployeeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            surname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@Length(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee/dto/save-employee.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Length, IsOptional, IsNumber, IsPositive, IsDateString } from 'class-validator';\n\nexport class SaveEmployeeDto {\n  @IsOptional()\n  employeeNumber?: number;\n\n  @IsNotEmpty()\n  @Length(1)\n  name: string;\n\n  @IsNotEmpty()\n  @Length(1)\n  surname: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  birthdate: Date;\n\n  @IsNumber()\n  @IsPositive()\n  salary: number;\n\n  @IsNumber()\n  employeeRoleId: number;\n\n  @IsNumber()\n  @IsOptional()\n  reportsToEmployeeId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveRoleDto.html":{"url":"classes/SaveRoleDto.html","title":"class - SaveRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/employee-role/dto/save-role.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/dto/save-role.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/employee-role/dto/save-role.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsNumber, IsNotEmpty, IsString } from 'class-validator';\n\nexport class SaveRoleDto {\n  @IsNumber()\n  @IsOptional()\n  id?: number;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                Represents a user - enables credential-based login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                setPassword\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/entities/user.entity.ts:21\n                \n            \n\n\n            \n                \n                    Hashes and sets the password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new password (plaintext)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/entities/user.entity.ts:30\n                \n            \n\n\n            \n                \n                    Verifies the user's hashed password against the\npassword provided.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password in plain text\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Represents a user - enables credential-based login.\n */\n@Entity()\nexport class User {\n  @PrimaryColumn({\n    unique: true,\n  })\n  username: string;\n\n  @Column()\n  private password: string;\n\n  /**\n   * Hashes and sets the password\n   * @param password The new password (plaintext)\n   */\n  async setPassword(password: string): Promise {\n    this.password = await bcrypt.hash(password, 10);\n  }\n\n  /**\n   * Verifies the user's hashed password against the\n   * password provided.\n   * @param plainTextPassword Password in plain text\n   */\n  async validatePassword(plainTextPassword: string): Promise {\n    return await bcrypt.compareSync(plainTextPassword, this.password);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n                    Logs the user in. Returns a jwt token.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('verify-token')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n                    Verify that a token is valid without generating a new one.\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards, Request, Get } from '@nestjs/common';\nimport { AuthService } from '../auth/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class UsersController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Logs the user in. Returns a jwt token.\n   * @param body\n   */\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return {\n      token: await this.authService.generateToken(req.user),\n    };\n  }\n\n  /**\n   * Verify that a token is valid without generating a new one.\n   */\n  @UseGuards(AuthGuard('jwt'))\n  @Get('verify-token')\n  async verifyToken() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), forwardRef(() => AuthModule)],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Private\n                                    Async\n                                setUpAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:21\n                \n            \n\n\n            \n                \n                    Finds a user by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setUpAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setUpAdmin()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n                    Ensures the application always has a defualt user.\nFunctionality to add more users could be added in future\nwhere there is a single super-admin account which creates\nother administrators/users. If there is no initial user,\nthen the system is useless.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\n\nconst ADMIN_USERNAME = 'admin';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {\n    this.setUpAdmin();\n  }\n\n  /**\n   * Finds a user by username\n   * @param username\n   */\n  async findUser(username: string): Promise {\n    return await this.usersRepository.findOne(username);\n  }\n\n  /**\n   * Ensures the application always has a defualt user.\n   * Functionality to add more users could be added in future\n   * where there is a single super-admin account which creates\n   * other administrators/users. If there is no initial user,\n   * then the system is useless.\n   */\n  private async setUpAdmin(): Promise {\n    const admin = await this.usersRepository.findOne({\n      where: {\n        username: ADMIN_USERNAME,\n      },\n    });\n\n    // the admin already exists, return\n    if (admin) {\n      return;\n    }\n\n    // create the default admin user\n    const adminUser = new User();\n    adminUser.username = ADMIN_USERNAME;\n    await adminUser.setPassword(process.env.ADMIN_DEFAULT_PASS);\n\n    await this.usersRepository.save(adminUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local-strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            defaultConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/database.module.ts\n            \n            variable\n            testConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/employee-role/dto/remove-role.dto.ts\n            \n            class\n            RemoveRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/employee-role/dto/save-role.dto.ts\n            \n            class\n            SaveRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/employee-role/employee-role.controller.ts\n            \n            controller\n            EmployeeRoleController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/employee-role/employee-role.service.ts\n            \n            injectable\n            EmployeeRoleService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/employee-role/entities/employee-role.entity.ts\n            \n            class\n            EmployeeRole\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/employee/dto/remove-employee.dto.ts\n            \n            class\n            RemoveEmployeeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/employee/dto/save-employee.dto.ts\n            \n            class\n            SaveEmployeeDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/employee/employee.controller.ts\n            \n            controller\n            EmployeeController\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/employee/employee.service.ts\n            \n            injectable\n            EmployeeService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/employee/entities/employee.entity.ts\n            \n            class\n            Employee\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            variable\n            ADMIN_USERNAME\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.0.0\n        \n            @nestjs/core : ^6.0.0\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.0.0\n        \n            @nestjs/typeorm : ^6.1.3\n        \n            @types/dotenv : ^6.1.1\n        \n            bcrypt : ^3.0.6\n        \n            cache-manager : ^2.10.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.9.1\n        \n            compression : ^1.7.4\n        \n            date-fns : ^1.30.1\n        \n            dotenv : ^8.0.0\n        \n            helmet : ^3.19.0\n        \n            joi : ^14.3.1\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^7.11.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.3.3\n        \n            sqlite : ^3.0.3\n        \n            typeorm : ^0.2.18\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEPI-USE Technical Assessment Project Server\n\nDocumentation\nAPI base url: epi-use-assessment-server.herokuapp.com\nClient Repository\nDescription\nServer source for EPI-USE technical assessment project. The server-side code provides most core functionality of the system and a persistence layer. It provides a RESTful API endpoint to the client-side application.\nUseful information regarding the use of endpoints can be found in the documentation link provided above.\nThis repository is configured to automatically deploy to Heroku, run unit tests and deploy documentation to Github pages.\nTechnologies\nThis server is built using the Nest.js framework. It is highly modular and configurable. Because the client-side application uses Angular (TypeScript), the choice of a TypeScript-based server framework which follows a very similar MVC pattern to Angular helps reduce time shifting paradigms between working on the  client and server code bases.\nTypeORM has been used as an object-relational mapper for this project. It provides a simple yet advanced interface between TypeScript objects and many database providers (this project uses SQLite for local development and Postgres for production). Nest.js also integrates very well with TypeORM.\nHeroku is used to deploy this server. It provides simple continuous deployment with decent performance for free. The server API base url is epi-use-assessment-server.herokuapp.com.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nNOTE: Unit testing has not been implemented yet\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covGenerating Documentation\nThis project is configured to use compodoc.\nTo generate documentation, run:\n$ npm run docConfiguration\nAll system configuration is stored in the system environment.\nThese properties can be overridden using the .env file.\nAn example .env file is given at /.env.example\nValid options and descriptions are given below:\nAuthentication options\n\nSECRET - a secret key used for JWT tokens. This should be kept secret and be reasonably long and random (string).\nADMIN_DEFAULT_PASS - when the server first runs, there is no administrator account, hence there are no users and the system cannot be run. If no user exists, an administrator account is created with this username. (string).\n\nDatabase persistence options\n\nDATABASE - the name of the database (string)\nDATABASE_TYPE - the type of database (sqlite, mysql, etc.)\nDATABASE_URL - database url (contains username, password, etc. information)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmployeeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmployeeRoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmployeeModule\n\n\n\ncluster_EmployeeModule_providers\n\n\n\ncluster_EmployeeRoleModule\n\n\n\ncluster_EmployeeRoleModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmployeeModule\n\nEmployeeModule\n\nAppModule -->\n\nEmployeeModule->AppModule\n\n\n\n\n\nEmployeeRoleModule\n\nEmployeeRoleModule\n\nAppModule -->\n\nEmployeeRoleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmployeeService\n\nEmployeeService\n\nEmployeeModule -->\n\nEmployeeService->EmployeeModule\n\n\n\n\n\nEmployeeRoleService\n\nEmployeeRoleService\n\nEmployeeRoleModule -->\n\nEmployeeRoleService->EmployeeRoleModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ADMIN_USERNAME   (src/.../users.service.ts)\n                        \n                        \n                            defaultConfig   (src/.../database.module.ts)\n                        \n                        \n                            testConfig   (src/.../database.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/users.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ADMIN_USERNAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'admin'\n                        \n                    \n\n\n            \n        \n\n    src/database/database.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  url: process.env.DATABASE_URL || undefined,\n  type: (process.env.DATABASE_TYPE as any) || 'postgres',\n  database: process.env.DATABASE || undefined,\n}\n                        \n                    \n\n                \n                    \n                        The default database configuration. Defaults to postgres for\nproduction mode. The database url would be given by the deployment\nserver.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            testConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'sqlite',\n  database: 'test-database.sqlite',\n}\n                        \n                    \n\n                \n                    \n                        Configuration for testing. Uses SQLite rather than overwriting\nthe production database.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
